[tox]
# this disables the fallback from non existing `pyXYZ` target to make sure we use always use basepython
ignore_basepython_conflict = true
isolated_build = true
skipsdist = true
envlist = py310,pep8,cmd

[testenv]
basepython = python3.10
passenv =
   GITHUB_ACTIONS
   CI
setenv =
   PYTHONASYNCIODEBUG=1
   DD_DOGSTATSD_DISABLE=1
   DD_TRACE_ENABLED=0
   MERGIFYENGINE_TEST_SETTINGS=fake.env
   PYTEST_TIMEOUT=20
skip_install = true
whitelist_externals = poetry
commands_pre =
  ./poetry-workaround.sh
  poetry install --sync
commands = {toxinidir}/run-tests.sh pytest -v --timeout_method thread {posargs}

[testenv:cover]
commands = {toxinidir}/run-tests.sh pytest -v --cov=mergify_engine --cov-config .coveragerc {posargs}

[testenv:py310-parallel]
envdir={toxworkdir}/py310
commands = {toxinidir}/run-tests.sh pytest -vv --timeout_method thread -n auto --tx popen//python=python3.10 {posargs}

[testenv:cmd]
envdir={toxworkdir}/py310
commands = {posargs}

[testenv:record]
envdir={toxworkdir}/py310
setenv =
   MERGIFYENGINE_RECORD=1
   DD_DOGSTATSD_DISABLE=1
   DD_TRACE_ENABLED=0
   MERGIFYENGINE_TEST_SETTINGS=test.env
   PYTEST_TIMEOUT=500
whitelist_externals =
  {[testenv]whitelist_externals}
  git
commands =
  {[testenv]commands}
  git add zfixtures/cassettes/

[testenv:import-checks]
setenv =
  {[testenv]setenv}
  MERGIFYENGINE_SENTRY_URL=https://12345@localhost/12345
commands_pre = poetry install --no-dev --sync
commands =
  ./run-tests.sh bash -c 'mergify-import-check && mergify-import-check-worker && mergify-import-check-web'

[testenv:test]
setenv =
   PYTHONUNBUFFERED=1
   DD_DOGSTATSD_DISABLE=1
   DD_TRACE_ENABLED=0
   MERGIFYENGINE_API_ENABLE=1
   MERGIFYENGINE_TEST_SETTINGS=test.env
   MERGIFYENGINE_DASHBOARD_UI_SITE_URLS=http://localhost:3000
   MERGIFYENGINE_DASHBOARD_UI_FEATURES=subscriptions;applications;intercom
   MERGIFYENGINE_DASHBOARD_UI_FRONT_BACKEND_URL=http://localhost:8802
   MERGIFYENGINE_SUBCRIPTION_BASE_URL=http://localhost:5001
commands = {toxinidir}/run-tests.sh honcho start --port 8802

[testenv:black]
commands =
  isort .
  black .

[testenv:yesqa]
whitelist_externals =
  {[testenv]whitelist_externals}
  find
commands =
  find mergify_engine -name "*.py" -exec echo yesqa \{\} ;

[testenv:pep8]
whitelist_externals =
  {[testenv]whitelist_externals}
  bash
commands =
  flake8
  isort -c .
  mypy
  yamllint .
  reno lint
  mergify-import-check-web
  mergify-import-check-worker
  bash tools/check-obsolete-fixtures.sh

[testenv:semgrep]
whitelist_externals =
  {[testenv]whitelist_externals}
  # FIXME(sileht): allow to use the one from brew until pip installation is fixed
  # https://github.com/returntocorp/semgrep/issues/4311
  semgrep
commands =
  semgrep --config=auto --error

[testenv:release-notes]
extras = release_notes
whitelist_externals =
  {[testenv]whitelist_externals}
  bash
  pandoc
commands =
  bash -c "reno -q report --title '' --no-show-source | pandoc -t markdown | sed -e '/^\.\./,+1d' -e '1,4d'"

[testenv:docs]
setenv =
  {[testenv]setenv}
  ENABLE_API=True
extras = docs
whitelist_externals =
  {[testenv]whitelist_externals}
  rm
  bash
  mkdir
  yarn
commands_pre =
  {[testenv]commands_pre}
  rm -rf docs/build
  yarn --cwd docs
commands =
  bash -c "git ls-files docs/*.rst | while read file; do if ! grep -q :description: $file; then echo E: no description meta tag in $file; exit 1; fi; done"
  mergify-openapi-spec docs/build/api/openapi.json
  yarn --cwd docs spectral lint -F hint build/api/openapi.json
  yarn --cwd docs sass source/scss/main.scss build/_bootstrap/bootstrap.css
  bash -c "cp -f docs/node_modules/bootstrap/dist/js/bootstrap.min.js* docs/build/_bootstrap/"
  sphinx-build -W -b spelling docs/source docs/build
  sphinx-build -W -b dirhtml docs/source docs/build

[flake8]
exclude = .tox,.eggs,docs/build,.venv
show-source = true
select = A,C,E,F,W,B,B950,TC,NU,PEA
# E101,W191: Can't ignore tabs indent on multiline strings:
#  https://gitlab.com/pycqa/flake8/issues/375
# E231 and E203 are not respected by black
# builtins:
# A003 allow builtin for class method/attribute
# bugbear:
# B950 is like E501, since we use black we don't care
# B306 is valid only for python 2 and safe for python 3
ignore = E501,W503,E203,G200,G201,E101,W191,E231,B902,B950,B306,A003,TC002,TC101,TC004,TC400,TC003,TC200
enable-extensions = G,FS003
