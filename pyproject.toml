[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mergify_engine"
version = "0.0.0"
description = "mergify is a GitHub Application to automate pull requests"
classifiers = ["Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.11"]
homepage = "https://github.com/mergifyio/engine"
authors = ["Mergify <hello@mergify.com>"]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
aiofiles = "*"
cryptography = "*"
daiquiri = ">=3"
datadog = "*"
ddtrace = ">=1.7.2"
fastapi = "*"
first = "*"
graphql-utils = ">=0.4"
gunicorn = {extras = ["setproctitle"], version = "*"}
hiredis = "*"
honcho = "*"
httpx = {version = ">=0.20.0", extras = ["http2"]}
jinja2 = "*"
markdownify = "*"
msgpack = ">=1.0.0"
pyjwt = "*"
python-dotenv = "*"
python-multipart = "*"
pyyaml = "*"
redis = ">=4.3.5,!=4.5.2"
sentry-sdk = {extras = ["fastapi", "starlette"], version = ">=1.9.0,<1.27.0"}
tenacity = ">=8.2.1"
uvicorn = {extras = ["standard"], version = "*"}
voluptuous = "*"
setproctitle = {version = "<1.3.0"}
imia = "*"
starsessions = "^2.1.2"
Authlib = "^1.2.1"
sqlalchemy = {version = ">=1.4", extras = ["asyncio", "postgresql_psycopg", "mypy"]}
sqlalchemy-utils = {version = ">=0.37.0", extras = ["encrypted", "password"]}
# NOTE(sileht): sqlalchemy does not install binary for psycopg > 3
psycopg = { version = ">=3.1", extras = ["binary"] }
# NOTE(sileht): sqlalchemy does not install it for some architecture like mac/m1...
greenlet = "^2.0.2"
deepdiff = "^6.3.0"
pydantic = {extras = ["dotenv"], version = "^1.10.9"}
alembic = "^1.11.1"

[tool.poetry.group.dev.dependencies]
sphinx = "^7.0.1"
sphinxcontrib-spelling = "^8.0.0"
sphinxcontrib-jquery = "^4.1"
respx = "^0.20.0"
semgrep = "^1.29.0"
types-first = "^2.0.5"
types-freezegun = "^1.1.10"
types-pkg-resources = "^0.1.3"
types-pyyaml = "^6.0.12"
types-redis = "^4.6.0"
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-github-actions-annotate-failures = "^0.2.0"
pytest-timeout = "^2.1.0"
mypy = "^1.3"
mypy-extensions = "^1.0.0"
vcrpy = ">=4.1.1"
freezegun = "^1.2.2"
yamllint = "^1.32.0"
reno = "^4.0.0"
anys = "^0.2.1"
pytest-split = "^0.8.1"
pytest-xdist = "^3.3.1"
asgi-lifespan = "^2.1.0"
filelock = "^3.12.2"
poethepoet = "^0.20.0"
pytest-rerunfailures = "^11.1"
ruff = "^0.0.275"
black = "^23.3.0"

[tool.poetry.scripts]
  mergify-database-create = "mergify_engine.models.manage:database_create"
  mergify-database-update = "mergify_engine.models.manage:database_update"
  mergify-database-stamp = "mergify_engine.models.manage:database_stamp"
  mergify-refresher = "mergify_engine.cli:refresher_cli"
  mergify-clear-token-cache = "mergify_engine.cli:clear_token_cache"
  mergify-debug = "mergify_engine.debug:main"
  mergify-stream-status = "mergify_engine.worker.stream_cli:status"
  mergify-stream-reschedule = "mergify_engine.worker.stream_cli:reschedule_now"
  mergify-engine-worker = "mergify_engine.worker.manager:main"
  mergify-import-check-worker = "mergify_engine.import_check:import_check_worker"
  mergify-import-check-web = "mergify_engine.import_check:import_check_web"
  mergify-import-check-db-update = "mergify_engine.import_check:import_check_db_update"
  mergify-count-seats = "mergify_engine.count_seats:main"
  mergify-api-public-openapi-spec = "mergify_engine.web.api.root:generate_openapi_spec"
  mergify-api-internal-openapi-spec = "mergify_engine.web.root:generate_openapi_spec"
  mergify-admin = "mergify_engine.admin:main"
  mergify-ci-download = "mergify_engine.cli:ci_download_handler"
  mergify-ci-global-insight = "mergify_engine.cli:global_insight_handler"
  mergify-redis-dump = "mergify_engine.redis_utils.dumper:main"

[tool.poetry.plugins]

[tool.poetry.plugins.mergify_signals]
  noop = "mergify_engine.signals:NoopSignal"
  last_seen = "mergify_engine.usage.last_seen:Signal"
  datadog = "mergify_engine._datadog:Signal"
  eventlogs = "mergify_engine.eventlogs:EventLogsSignal"
  queue_statistics = "mergify_engine.queue.statistics:StatisticsSignal"
  queue_statistics_accuracy = "mergify_engine.queue.statistics_accuracy:StatisticsAccuracyMeasurement"

[tool.poetry.plugins.mergify_actions]
  assign = "mergify_engine.actions.assign:AssignAction"
  backport = "mergify_engine.actions.backport:BackportAction"
  close = "mergify_engine.actions.close:CloseAction"
  comment = "mergify_engine.actions.comment:CommentAction"
  copy = "mergify_engine.actions.copy:CopyAction"
  delete_head_branch = "mergify_engine.actions.delete_head_branch:DeleteHeadBranchAction"
  dismiss_reviews = "mergify_engine.actions.dismiss_reviews:DismissReviewsAction"
  edit = "mergify_engine.actions.edit:EditAction"
  label = "mergify_engine.actions.label:LabelAction"
  merge = "mergify_engine.actions.merge:MergeAction"
  post_check = "mergify_engine.actions.post_check:PostCheckAction"
  queue = "mergify_engine.actions.queue:QueueAction"
  rebase = "mergify_engine.actions.rebase:RebaseAction"
  request_reviews = "mergify_engine.actions.request_reviews:RequestReviewsAction"
  review = "mergify_engine.actions.review:ReviewAction"
  squash = "mergify_engine.actions.squash:SquashAction"
  update = "mergify_engine.actions.update:UpdateAction"

[tool.poetry.plugins.mergify_commands]
  backport = "mergify_engine.actions.backport:BackportAction"
  copy = "mergify_engine.actions.copy:CopyAction"
  queue = "mergify_engine.actions.queue:QueueAction"
  rebase = "mergify_engine.actions.rebase:RebaseAction"
  refresh = "mergify_engine.actions.refresh:RefreshCommand"
  requeue = "mergify_engine.actions.requeue:RequeueCommand"
  squash = "mergify_engine.actions.squash:SquashAction"
  unqueue = "mergify_engine.actions.unqueue:UnqueueCommand"
  update = "mergify_engine.actions.update:UpdateAction"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--strict-markers --durations=10"
asyncio_mode = "auto"
markers = ["recorder", "subscription", "delete_branch_on_merge"]
filterwarnings = [
    "error",
    # FIXME(sileht): no idea where it comes from, backtraces are cryptic
    #  ResourceWarning: unclosed <socket.socket fd=14, family=AddressFamily.AF_UNIX, type=SocketKind.SOCK_STREAM, proto=0>
    "ignore::ResourceWarning",
    # NOTE(sileht): until https://github.com/kvesteri/sqlalchemy-utils/issues/646 is fixed and released
    "ignore:'crypt' is deprecated and slated for removal:DeprecationWarning",
    # sqlalchemy 2.0 warning
    "ignore:.*sqlalchemy.orm.mapper().*:sqlalchemy.exc.SADeprecationWarning"
]
testpaths = ["mergify_engine/tests"]

[tool.poe]
include = ["poe.toml"]

[tool.black]
target-version = ['py311']

[tool.mypy]
strict = true
warn_unreachable = true
exclude = [".venv"]
files = ["mergify_engine"]
show_error_codes = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = [
       "deepdiff.*",
       "vcr.*",
       "voluptuous.*",
       "msgpack.*",
       "bs4.*",
       "graphql_utils",
       "markdownify",
       "asgi_lifespan",
       "authlib.*",
       "imia.*",
       "starsessions.*",
       "sqlalchemy_utils.*",
]
ignore_missing_imports = true


[tool.ruff]
line-length = 88
target-version = "py311"
select = [
 "E", "W", "F", "I", "A", "B", "Q",
 "C4", "T10", "ISC", "ICN", "BLE",
 "G", "RSE", "TID", "TRY", "PLE", "UP",
 "RUF", "RET",
 # FIXME(sileht): very interresting, but require easy manual code change
 # "DTZ", "ARG", "TCH", "COM",
 # FIXME(sileht): doctring/rst-docstring like
 # "D"
]

ignore = [
    # NOTE(sileht): line-length is up to black
    "E501",
    # NOTE(sileht): we prefer using exc_info=True
    "G201", "TRY200", "TRY400",
    # NOTE(sileht): "Unnecessary parentheses on raised exception", this breaks
    # isinstance on exception
    "RSE102",
    # NOTE(sileht): No exception with message set via __init__
    "TRY003", "TRY301",
    # NOTE(sileht): built-in shadow, interresting but to raise an error for
    # TypedDict/NamedTuple with key named like builtin, so it's useless
    "A003",
    # NOTE(sileht): This enforce usage of raise ... from ...
    "B904",
    # FIXME(sileht): Convert some exception -> TypeError
    "TRY004",
    # FIXME(sileht): very interresting, ruff BLE is far better that flake8-blind-except
    "BLE001",
    # NOTE(sileht): looks buggy
    "RET508"
]

[tool.ruff.isort]
force-single-line = true
force-sort-within-sections = true
lines-after-imports = 2
known-first-party = ["mergify_engine"]
known-third-party = ["datadog"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"
