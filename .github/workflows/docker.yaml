name: Docker
permissions: read-all

on:
  push:
    branches:
      - main
    tags: 
      - "*"
  pull_request_target:
    branches:
      - main

jobs:
  heroku:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref || github.head_ref || github.run_id }}
      cancel-in-progress: true
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    services:
      redis:
        image: redis:latest
        ports:
          - 6363:6379
    steps:
      - name: Fetch job check run information
        id: fetch-check-run
        if: always()
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            const { data } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const job = data.jobs.find(
              (j) => j.name.includes("${{ github.job }}")
            )
            core.setOutput("job_url", job.html_url);
            core.setOutput("job_id", String(job.id));

      - name: Release start
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Starting release (${{ steps.fetch-check-run.outputs.job_id }}) of Mergify Enterprise ${{ github.ref_name }}*"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Job log",
                      "emoji": true
                    },
                    "url": "${{ steps.fetch-check-run.outputs.job_url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Deployment start
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Starting deployment (${{ steps.fetch-check-run.outputs.job_id }}) of mergify-engine*"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Job log",
                      "emoji": true
                    },
                    "url": "${{ steps.fetch-check-run.outputs.job_url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true

        # NOTE(sileht):  github.event.pull_request.head.sha is not set for push event
        # so we pick the HEAD sha if the checkout for the image:
        # * for push, HEAD is main branch head (default actions/checkout)
        # * for pull_request_target, HEAD is github.event.pull_request.head.sha (thanks to actions/checkout)
      - name: üìù Prepare variables
        id: vars
        run: |
          HEROKU_ENVIRONMENT="mergify-engine-next"
          echo ::set-output name=HEROKU_ENVIRONMENT::${HEROKU_ENVIRONMENT}

          VERSION="${{ github.ref_name }}"¬†
          echo ::set-output name=VERSION::${VERSION}

          REVISION="$(git rev-list --count HEAD)"
          echo ::set-output name=REVISION::${REVISION}

          SHA="$(/usr/bin/git log -1 --format='%H')"
          echo ::set-output name=SHA::${SHA}

          PYTHON_VERSION="$(cut -d- -f2 mergify-engine/runtime.txt)"
          echo ::set-output name=PYTHON_VERSION::${PYTHON_VERSION}


      - name: ‚öôÔ∏è Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: ‚öôÔ∏è Build & cache all layers
        uses: docker/build-push-action@v2
        with:
          # NOTE(sileht): COMMON section must be the same on all build steps
          # GitHub workflow does not support Yaml Anchors, so we have to duplciate it...
          # COMMON
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{¬†steps.vars.outputs.VERSION }}
            MERGIFYENGINE_REVISION=${{¬†steps.vars.outputs.REVISION }}
            MERGIFYENGINE_SHA=${{¬†steps.vars.outputs.SHA }}
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ‚öôÔ∏è Build saas-web
        uses: docker/build-push-action@v2
        with:
          target: saas-web
          tags: web:tmp
          outputs: type=docker
          # COMMON
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{¬†steps.vars.outputs.VERSION }}
            MERGIFYENGINE_REVISION=${{¬†steps.vars.outputs.REVISION }}
            MERGIFYENGINE_SHA=${{¬†steps.vars.outputs.SHA }}
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ‚öôÔ∏è Build saas-worker-shared
        uses: docker/build-push-action@v2
        with:
          target: saas-worker-shared
          tags: worker-shared:tmp
          outputs: type=docker
          # COMMON
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{¬†steps.vars.outputs.VERSION }}
            MERGIFYENGINE_REVISION=${{¬†steps.vars.outputs.REVISION }}
            MERGIFYENGINE_SHA=${{¬†steps.vars.outputs.SHA }}
          context: .
          push: false
          cache-from: type=gha

      - name: ‚öôÔ∏è Build saas-worker-dedicated
        uses: docker/build-push-action@v2
        with:
          target: saas-worker-dedicated
          tags: worker-dedicated:tmp
          outputs: type=docker
          # COMMON
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{¬†steps.vars.outputs.VERSION }}
            MERGIFYENGINE_REVISION=${{¬†steps.vars.outputs.REVISION }}
            MERGIFYENGINE_SHA=${{¬†steps.vars.outputs.SHA }}
          context: .
          push: false
          cache-from: type=gha

      - name: ‚öôÔ∏è Build onpremise
        uses: docker/build-push-action@v2
        with:
          target: onpremise
          tags: onpremise:tmp
          outputs: type=docker
          # COMMON
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{¬†steps.vars.outputs.VERSION }}
            MERGIFYENGINE_REVISION=${{¬†steps.vars.outputs.REVISION }}
            MERGIFYENGINE_SHA=${{¬†steps.vars.outputs.SHA }}
          context: .
          push: false
          cache-from: type=gha

      - name: üèì Testing
        run: |
          for i in web worker-shared worker-dedicated onpremise; do
            docker run \
              --env-file fake.env \
              -e MERGIFYENGINE_STORAGE_URL=redis://redis:6363 \
              --entrypoint /bin/bash \
              $i:tmp \
              -c '/datadog-wrapper.sh mergify-import-check-worker; /datadog-wrapper.sh mergify-import-check-web;'
          done

      ######################
      # ON PREMISE RELEASE #
      ######################
      #
      # Next steps are only on tags for pushing change to DockerHub
      #

      - name: Login to DockerHub
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # The second phase just upload a new tag that will be used for the release cycle
      - name: üìú Tag and Push (on-premise)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          image="docker.io/mergifyio/engine-test"
          docker tag "onpremise:tmp" "$image:latest"
          docker tag "onpremise:tmp" "$image:${{¬†github.ref_name }}"
          docker push "$image:latest"
          docker push "$image:${{¬†github.ref_name }}"

      - name: Prepare report status
        id: report-status-onpremise
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          if [ "${{ job.status }}" == "success" ] ; then
            echo "::set-output name=emoji::ü¶æ"
          else
            echo "::set-output name=emoji::üí•"
          fi

      - name: Report Status
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # yamllint disable rule:line-length
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release (${{ steps.fetch-check-run.outputs.job_id }}) of Mergify Enterprise ${{ github.ref_name }} finished ${{ steps.report-status.outputs.emoji }}*\nConclusion: ${{ job.status }}"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Job log",
                      "emoji": true
                    },
                    "url": "${{ steps.fetch-check-run.outputs.job_url }}"
                  }
                }
              ]
            }
          # yamllint enable rule:line-length
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      ################
      # SaaS RELEASE #
      ################
      #
      # Next steps are only on main branch for pushing change in production
      #
      - name: üëÆ Log into in Heroku
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cat >~/.netrc <<EOF
          machine api.heroku.com
              login prod+heroku@mergify.com
              password ${{secrets.HEROKU_API_KEY}}
          machine git.heroku.com
              login prod+heroku@mergify.com
              password ${{secrets.HEROKU_API_KEY}}
          EOF
          heroku container:login

      # The first phase upload all images to heroku
      - name: üìú Tag and Push (versionned)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          REVISION: ${{ steps.vars.outputs.REVISION }}
          SHA: ${{ steps.vars.outputs.SHA }}
          HEROKU_ENVIRONMENT: ${{ steps.vars.outputs.HEROKU_ENVIRONMENT }}
        run: |
          for i in web worker-shared worker-dedicated; do
            image="registry.heroku.com/${HEROKU_ENVIRONMENT}/${i}:${REVISION}-${SHA}"
            docker tag "${i}:tmp" "$image"
            docker push "$image"
          done

      # The second phase just upload a new tag that will be used for the release cycle
      - name: üìú Tag and Push (latest)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          HEROKU_ENVIRONMENT: ${{ steps.vars.outputs.HEROKU_ENVIRONMENT }}
        run: |
          for i in web worker-shared worker-dedicated; do
            image="registry.heroku.com/${HEROKU_ENVIRONMENT}/${i}:latest"
            docker tag "${i}:tmp" "$image"
            docker push "$image"
          done

      # The third phase start the new latest images
      - name: üöÄ Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          HEROKU_ENVIRONMENT: ${{ steps.vars.outputs.HEROKU_ENVIRONMENT }}
        run: |
          for i in web worker-shared worker-dedicated; do
            heroku container:release -a "${HEROKU_ENVIRONMENT}" "${i}"
          done

      - name: Prepare report status
        id: report-status
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo 'COMMIT_MESSAGE<<EOF' >> $GITHUB_ENV
          git log -1 | sed ':a;N;$!ba;s/\n/\\n/g' >> $GITHUB_ENV
          echo EOF >> $GITHUB_ENV

          if [ "${{ job.status }}" == "success" ] ; then
            echo "::set-output name=emoji::ü¶æ"
          else
            echo "::set-output name=emoji::üí•"
          fi

      - name: Report Status
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # yamllint disable rule:line-length
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment (${{ steps.fetch-check-run.outputs.job_id }}) of mergify-engine finished ${{ steps.report-status.outputs.emoji }}*\nConclusion: ${{ job.status }}\n```${{ env.COMMIT_MESSAGE }}```"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Job log",
                      "emoji": true
                    },
                    "url": "${{ steps.fetch-check-run.outputs.job_url }}"
                  }
                }
              ]
            }
          # yamllint enable rule:line-length
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
