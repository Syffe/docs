name: Docker On Premise
permissions: read-all

on:
  push:
    tags:
      - "*"
  pull_request:
    branches:
      - main
      - devs/**
    paths:
      - "dockerfiles/**"
      - "datadog/**"
      - "datadog-wrapper.sh"
      - "onpremise/**"
      - "fake.env"
      - ".github/workflows/docker-*.yaml"

concurrency:
  # yamllint disable-line rule:line-length
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  docker-onpremise:
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    services:
      redis:
        image: redis:latest
        ports:
          - 6363:6379
      postgres:
        # Pin PostgreSQL to the version that is in ubuntu-latest
        image: postgres:12.5
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    steps:
      - name: Release start
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: Mergifyio/gha-slack-notification@main
        with:
          type: release-start
          project: Mergify Enterprise
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL_RELEASES }}

      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true

      # NOTE(sileht):  github.event.pull_request.head.sha is not set for push event
      # so we pick the HEAD sha if the checkout for the image:
      # * for push, HEAD is main branch head (default actions/checkout)
      # * for pull_request_target, HEAD is github.event.pull_request.head.sha (thanks to actions/checkout)
      - name: 📝 Prepare variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            UI_VERSION="latest"
            INSTALLER_VERSION="latest"
          else
            UI_VERSION="${{ github.ref_name }}"
            INSTALLER_VERSION="${{ github.ref_name }}"
          fi
          echo "UI_VERSION=${UI_VERSION}" >> "$GITHUB_OUTPUT"
          echo "INSTALLER_VERSION=${INSTALLER_VERSION}" >> "$GITHUB_OUTPUT"

          ENGINE_VERSION="${{ github.ref_name }}"
          echo "ENGINE_VERSION=${ENGINE_VERSION}" >> "$GITHUB_OUTPUT"

          ENGINE_SHA="$(/usr/bin/git log -1 --format='%H')"
          echo "ENGINE_SHA=${ENGINE_SHA}" >> "$GITHUB_OUTPUT"

          PYTHON_VERSION="$(cut -d- -f2 runtime.txt)"
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> "$GITHUB_OUTPUT"

          BUILD_DATE="$(date '+%Y-%m-%d')"
          echo "BUILD_DATE=${BUILD_DATE}" >> "$GITHUB_OUTPUT"

          cat \
            dockerfiles/Dockerfile.onpremise.header \
            dockerfiles/Dockerfile.common \
            dockerfiles/Dockerfile.onpremise.footer \
            > Dockerfile

      - name: ⚙️ Set up Docker Buildx
        id: buildx
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: docker/setup-buildx-action@v3

      - name: ⚙️ Build & cache all layers
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: docker/build-push-action@v5
        with:
          target: onpremise
          tags: onpremise:tmp
          outputs: type=docker
          # NOTE(sileht): COMMON section must be the same on all build steps
          # GitHub workflow does not support Yaml Anchors, so we have to duplciate it...
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{ steps.vars.outputs.ENGINE_VERSION }}
            MERGIFYUI_VERSION=${{ steps.vars.outputs.UI_VERSION }}
            MERGIFYINSTALLER_VERSION=${{ steps.vars.outputs.INSTALLER_VERSION }}
            MERGIFYENGINE_SHA=${{ steps.vars.outputs.ENGINE_SHA }}
            BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
          context: .
          push: false
          # Use the cache of the saas builder
          cache-from: type=gha

      - name: 🏓 Testing
        run: |
          docker run \
              --env-file fake.env \
              -e MERGIFYENGINE_STORAGE_URL=redis://redis:6363 \
              -e MERGIFYENGINE_DATABASE_URL=postgresql://postgres:password@postgres:5432/postgres \
              --entrypoint /bin/bash \
              onpremise:tmp \
            -c 'set -e; /datadog-wrapper.sh /app/tools/import-checks.sh'


      ######################
      # ON PREMISE RELEASE #
      ######################
      #
      # Next steps are only on tags for pushing change to DockerHub
      #

      - name: Login to DockerHub
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # The second phase just upload a new tag that will be used for the release cycle
      - name: 📜 Tag and Push (on-premise)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          image="docker.io/mergifyio/engine"
          docker tag "onpremise:tmp" "$image:${{ github.ref_name }}"
          docker push "$image:${{ github.ref_name }}"

      - name: Prepare report status
        id: report-status-onpremise
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          if [ "${{ job.status }}" == "success" ] ; then
            echo "emoji=🦾" >> "$GITHUB_OUTPUT"
          elif [ "${{ job.status }}" == "cancelled" ] ; then
            echo "emoji=✋" >> "$GITHUB_OUTPUT"
          else
            echo "emoji=💥" >> "$GITHUB_OUTPUT"
          fi

      - name: Release finish
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: Mergifyio/gha-slack-notification@main
        with:
          type: release-finish
          project: Mergify Enterprise
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL_RELEASES }}
