name: Docker On Premise
permissions: read-all

on:
  push:
    tags:
      - "*"
  pull_request:
    branches:
      - main
    paths:
      - "dockerfiles/**"
      - "datadog/**"
      - "datadog-wrapper.sh"
      - "installer/**"
      - "onpremise/**"
      - "fake.env"
      - ".github/workflows/docker-*.yaml"

concurrency:
  # yamllint disable-line rule:line-length
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  docker-onpremise:
    timeout-minutes: 15
    runs-on: ubuntu-20.04
    services:
      redis:
        image: redis:latest
        ports:
          - 6363:6379
      postgres:
        # Pin PostgreSQL to the version that is in ubuntu-latest
        image: postgres:12.5
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    steps:
      - name: Fetch job check run information
        id: fetch-check-run
        if: always()
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { data } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            const job = data.jobs.find(
              (j) => j.name.includes("${{ github.job }}")
            )
            core.setOutput("job_url", job.html_url);
            core.setOutput("job_id", String(job.id));

      - name: Release start
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: Mergifyio/gha-slack-notification@main
        with:
          # yamllint disable-line rule:line-length
          message: "*Starting release (${{ steps.fetch-check-run.outputs.job_id }}) of Mergify Enterprise ${{ github.ref_name }}*"
          job_url: "${{ steps.fetch-check-run.outputs.job_url }}"
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}

      - name: ⬇️ Checkout
        uses: actions/checkout@v3.3.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true

      # NOTE(sileht):  github.event.pull_request.head.sha is not set for push event
      # so we pick the HEAD sha if the checkout for the image:
      # * for push, HEAD is main branch head (default actions/checkout)
      # * for pull_request_target, HEAD is github.event.pull_request.head.sha (thanks to actions/checkout)
      - name: 📝 Prepare variables
        id: vars
        run: |
          VERSION="${{ github.ref_name }}"
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"

          SHA="$(/usr/bin/git log -1 --format='%H')"
          echo "SHA=${SHA}" >> "$GITHUB_OUTPUT"

          PYTHON_VERSION="$(cut -d- -f2 runtime.txt)"
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> "$GITHUB_OUTPUT"

          BUILD_DATE="$(date '+%Y-%m-%d')"
          echo "BUILD_DATE=${BUILD_DATE}" >> "$GITHUB_OUTPUT"

          cat \
            dockerfiles/Dockerfile.common \
            dockerfiles/Dockerfile.onpremise \
            > Dockerfile

      - name: ⚙️ Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: ⚙️ Build & cache all layers
        uses: docker/build-push-action@v4
        with:
          target: onpremise
          tags: onpremise:tmp
          outputs: type=docker
          # NOTE(sileht): COMMON section must be the same on all build steps
          # GitHub workflow does not support Yaml Anchors, so we have to duplciate it...
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{ steps.vars.outputs.VERSION }}
            MERGIFYENGINE_SHA=${{ steps.vars.outputs.SHA }}
            BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
          context: .
          push: false
          # Use the cache of the saas builder
          cache-from: type=gha

      - name: 🏓 Testing
        run: |
          docker run \
              --env-file fake.env \
              -e MERGIFYENGINE_STORAGE_URL=redis://redis:6363 \
              -e MERGIFYENGINE_DATABASE_URL=postgresql://postgres:password@postgres:5432/postgres \
              --entrypoint /bin/bash \
              onpremise:tmp \
              -c '/datadog-wrapper.sh mergify-import-check-worker;
                  /datadog-wrapper.sh mergify-import-check-web;'

      ######################
      # ON PREMISE RELEASE #
      ######################
      #
      # Next steps are only on tags for pushing change to DockerHub
      #

      - name: Login to DockerHub
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # The second phase just upload a new tag that will be used for the release cycle
      - name: 📜 Tag and Push (on-premise)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          image="docker.io/mergifyio/engine"
          docker tag "onpremise:tmp" "$image:latest"
          docker tag "onpremise:tmp" "$image:${{ github.ref_name }}"
          docker push "$image:latest"
          docker push "$image:${{ github.ref_name }}"

      - name: Prepare report status
        id: report-status-onpremise
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          if [ "${{ job.status }}" == "success" ] ; then
            echo "emoji=🦾" >> "$GITHUB_OUTPUT"
          elif [ "${{ job.status }}" == "cancelled" ] ; then
            echo "emoji=✋" >> "$GITHUB_OUTPUT"
          else
            echo "emoji=💥" >> "$GITHUB_OUTPUT"
          fi

      - name: Report Status
        if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: Mergifyio/gha-slack-notification@main
        with:
          # yamllint disable-line rule:line-length
          message: "*Release (${{ steps.fetch-check-run.outputs.job_id }}) of Mergify Enterprise ${{ github.ref_name }} finished ${{ steps.report-status-onpremise.outputs.emoji }}*\\nConclusion: ${{ job.status }}"
          job_url: "${{ steps.fetch-check-run.outputs.job_url }}"
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL }}
