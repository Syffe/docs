name: Docker SaaS


on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - devs/**
    paths:
      - "dockerfiles/**"
      - "datadog/**"
      - "datadog-wrapper.sh"
      - "onpremise/**"
      - "fake.env"
      - ".github/workflows/docker-*.yaml"

concurrency:
  # yamllint disable-line rule:line-length
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  docker-lint:
    permissions:
      contents: "read"
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      # yamllint disable-line rule:line-length
      # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: dockerfiles/Dockerfile.common
      # yamllint disable-line rule:line-length
      # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: dockerfiles/Dockerfile.saas
      # yamllint disable-line rule:line-length
      # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: dockerfiles/Dockerfile.onpremise.header
      # yamllint disable-line rule:line-length
      # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: dockerfiles/Dockerfile.onpremise.footer

  docker-saas:
    permissions:
      contents: "read"
      id-token: "write"
      actions: "read"
    timeout-minutes: 15
    runs-on: ubuntu-22.04
    services:
      redis:
        image: redis:latest
        ports:
          - 6363:6379
      postgres:
        # Pin PostgreSQL to the version that is in ubuntu-latest
        image: ankane/pgvector:v0.4.4
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: --name postgres
    steps:
      - name: Deployment start
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: Mergifyio/gha-slack-notification@main
        with:
          type: deploy-start
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL_RELEASES }}

      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true

      # NOTE(sileht):  github.event.pull_request.head.sha is not set for push event
      # so we pick the HEAD sha if the checkout for the image:
      # * for push, HEAD is main branch head (default actions/checkout)
      # * for pull_request_target, HEAD is github.event.pull_request.head.sha (thanks to actions/checkout)
      - name: 📝 Prepare variables
        id: vars
        run: |
          HEROKU_ENVIRONMENT="mergify-engine"
          echo "HEROKU_ENVIRONMENT=${HEROKU_ENVIRONMENT}" >> "$GITHUB_OUTPUT"

          VERSION="${{ github.ref_name }}"
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"

          SHA="$(/usr/bin/git log -1 --format='%H')"
          echo "SHA=${SHA}" >> "$GITHUB_OUTPUT"

          PYTHON_VERSION="$(cut -d- -f2 runtime.txt)"
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> "$GITHUB_OUTPUT"

          BUILD_DATE="$(date '+%Y-%m-%d')"
          echo "BUILD_DATE=${BUILD_DATE}" >> "$GITHUB_OUTPUT"

          cat \
            dockerfiles/Dockerfile.common \
            dockerfiles/Dockerfile.saas \
            > Dockerfile

      - name: ⚙️ Set up Docker Buildx
        id: buildx
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: docker/setup-buildx-action@v3

      - name: ⚙️ Build & cache all layers
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: docker/build-push-action@v5
        with:
          # NOTE(sileht): COMMON section must be the same on all build steps
          # GitHub workflow does not support Yaml Anchors, so we have to duplciate it...
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{ steps.vars.outputs.VERSION }}
            MERGIFYENGINE_SHA=${{ steps.vars.outputs.SHA }}
            BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=local,dest=/home/runner/docker-cache

      - name: ⚙️  Upload layers cache to GitHub Action Cache
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: docker/build-push-action@v5
        with:
          # NOTE(sileht): COMMON section must be the same on all build steps
          # GitHub workflow does not support Yaml Anchors, so we have to duplciate it...
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{ steps.vars.outputs.VERSION }}
            MERGIFYENGINE_SHA=${{ steps.vars.outputs.SHA }}
            BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
          context: .
          push: false
          cache-from: type=local,src=/home/runner/docker-cache
          cache-to: type=gha,mode=max

      - name: ⚙️ Build saas-web
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: docker/build-push-action@v5
        with:
          target: saas-web
          tags: web:tmp
          outputs: type=docker
          # COMMON
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{ steps.vars.outputs.VERSION }}
            MERGIFYENGINE_SHA=${{ steps.vars.outputs.SHA }}
            BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
          context: .
          push: false
          cache-from: type=local,src=/home/runner/docker-cache

      - name: ⚙️ Build saas-worker
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: docker/build-push-action@v5
        with:
          target: saas-worker
          tags: worker:tmp
          outputs: type=docker
          # COMMON
          build-args: |
            PYTHON_VERSION=${{ steps.vars.outputs.PYTHON_VERSION }}
            MERGIFYENGINE_VERSION=${{ steps.vars.outputs.VERSION }}
            MERGIFYENGINE_SHA=${{ steps.vars.outputs.SHA }}
            BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }}
          context: .
          push: false
          cache-from: type=local,src=/home/runner/docker-cache

      - name: 🏓 Testing
        run: |
          for i in web worker; do
            docker run \
              --env-file fake.env \
              -e DD_API_KEY=testing-false-key \
              -e DYNO=testing.1 \
              -e MERGIFYENGINE_STORAGE_URL=redis://redis:6363 \
              -e MERGIFYENGINE_DATABASE_URL=postgresql://postgres:password@postgres:5432/postgres \
              -e SENTRY_URL=https://fake-sentry.example.com/ \
              -e SENTRY_ENVIRONMENT=ci \
              --entrypoint /bin/bash \
              $i:tmp \
              -c 'set -e; /datadog-wrapper.sh /app/tools/import-checks.sh'
          done

      ################
      # SaaS RELEASE #
      ################
      #
      # Next steps are only on main branch for pushing change in production
      #
      - name: Setup AWS credentials
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::912098512391:role/OIDC_RDS@engine_ci
          aws-region: us-east-1

      - name: 👮 Log into in Heroku
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cat >~/.netrc <<EOF
          machine api.heroku.com
              login prod+heroku@mergify.com
              password ${{secrets.HEROKU_API_KEY}}
          machine git.heroku.com
              login prod+heroku@mergify.com
              password ${{secrets.HEROKU_API_KEY}}
          EOF
          heroku container:login

      - name: Prepare MERGIFYENGINE_DATABASE_URL
        id: PRODUCTION_DATABASE_BASE_URL
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          PRODUCTION_DATABASE_HOST: ${{ vars.PRODUCTION_DATABASE_HOST }}
          PRODUCTION_DATABASE_PORT: ${{ vars.PRODUCTION_DATABASE_PORT }}
          PRODUCTION_DATABASE_USERNAME: ${{ vars.PRODUCTION_DATABASE_USERNAME }}
        run: |
          URL="$(tools/build-production-database-base-url.sh)"
          echo "::add-mask::$URL"
          echo "PRODUCTION_DATABASE_BASE_URL=$URL" >> "$GITHUB_OUTPUT"

      - name: Check startup with production configuration
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Use a fifo to not write them on disk
          mkfifo creds.tmp
          # We remove quote escape generated by heroku
          heroku config -a mergify-engine -s | sed "s/='\(.*\)'\$/=\1/g" > creds.tmp &
          docker run \
              --env-file creds.tmp \
              -e DYNO=testing.1 \
              --entrypoint /bin/bash \
              web:tmp \
              -c 'set -e; /datadog-wrapper.sh /app/tools/import-checks.sh'

      - name: 📜 Tag and Push
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          HEROKU_ENVIRONMENT: ${{ steps.vars.outputs.HEROKU_ENVIRONMENT }}
        run: |
          for i in worker-shared worker-dedicated; do
            docker tag "worker:tmp" "${i}:tmp"
          done
          for i in web worker-shared worker-dedicated; do
            image="registry.heroku.com/${HEROKU_ENVIRONMENT}/${i}:latest"
            docker tag "${i}:tmp" "$image"
            docker push "$image"
          done

      - name: Testing production database upgrade
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          PRODUCTION_DATABASE_BASE_URL: |-
            ${{ steps.PRODUCTION_DATABASE_BASE_URL.outputs.PRODUCTION_DATABASE_BASE_URL }}
        run: |
          docker run \
              --env-file fake.env \
              -e DD_API_KEY=testing-false-key \
              -e DYNO=testing.1 \
              -e MERGIFYENGINE_STORAGE_URL=redis://redis:6363 \
              -e MERGIFYENGINE_DATABASE_URL="${PRODUCTION_DATABASE_BASE_URL}/engine_ci_testing" \
              -e SENTRY_URL=https://fake-sentry.example.com/ \
              -e SENTRY_ENVIRONMENT=ci \
              --entrypoint /bin/bash \
              web:tmp \
              -c 'mergify-database-update'


      - name: 🚀 Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          HEROKU_ENVIRONMENT: ${{ steps.vars.outputs.HEROKU_ENVIRONMENT }}
        run: |
          for i in web worker-shared worker-dedicated; do
            heroku container:release -a "${HEROKU_ENVIRONMENT}" "${i}"
          done

      - name: 🚀 Update Production database
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          HEROKU_ENVIRONMENT: ${{ steps.vars.outputs.HEROKU_ENVIRONMENT }}
        run: |
          heroku run -a "${HEROKU_ENVIRONMENT}" -x mergify-database-update

      - name: Deployment finish
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        # yamllint disable-line rule:line-length
        # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        uses: Mergifyio/gha-slack-notification@main
        with:
          type: deploy-finish
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL_RELEASES }}
          FAILURE_ONLY_SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENT_WEBHOOK_URL_PROD }}
