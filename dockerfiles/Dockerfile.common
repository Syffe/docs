ARG PYTHON_VERSION
# Used to rebuild everything without cache everyday
ARG BUILD_DATE

### BASE ###
FROM python:${PYTHON_VERSION}-slim-bullseye as python-base
ARG BUILD_DATE
RUN test -n "$BUILD_DATE"
ENV DEBIAN_FRONTEND=noninteractive
# We don't care about the tmux version on debian stable it's stable enough
# hadolint ignore=DL3008
RUN useradd -m mergify && \
    printf 'APT::Get::Install-Recommends "false";\nAPT::Get::Install-Suggests "false";\n' > /etc/apt/apt.conf.d/99local && \
    printf 'deb http://deb.debian.org/debian bullseye-backports main contrib non-free\n' > /etc/apt/sources.list.d/backports.list && \
    apt-get update -y && apt-get upgrade -y && apt-get install -y git/bullseye-backports git-man/bullseye-backports tmux && apt-get autoremove --purge -y

### BUILDER PYTHON ###
FROM python-base as python-builder

# gcc is required to build hiredis wheel when hiredis prebuilt wheel is not yet available on pypi just after a python release
# hadolint ignore=DL3008
RUN apt-get install -y gcc && mkdir /app

COPY requirements-poetry.txt /app
COPY pyproject.toml /app
COPY poetry.lock /app
WORKDIR /app

# nosemgrep: generic.ci.security.use-frozen-lockfile.use-frozen-lockfile-pip
RUN python3 -m pip install --no-cache-dir -r requirements-poetry.txt && \
    poetry config virtualenvs.in-project true && \
    poetry config virtualenvs.options.no-pip true && \
    poetry config virtualenvs.options.no-setuptools true && \
    poetry install --only main --sync --no-root

COPY tools/import-checks.sh /app/tools/
COPY mergify_engine /app/mergify_engine
COPY datadog /app/datadog
COPY datadog-wrapper.sh /app/
RUN poetry install --only main --sync

### BASE RUNNER ###
FROM python-base as system-base
ARG DD_AGENT_VERSION=1:7.50.2-1
ARG DD_MERGIFY_VERSION=1.0.1
LABEL datadog-agent.version="$DD_AGENT_VERSION"
ENV DD_DOGSTATSD_DISABLE 1
ENV DD_TRACE_ENABLED 0
ENV DD_MERGIFY_VERSION="$DD_MERGIFY_VERSION"

# Add Datadog repository, signing keys and packages
ENV DATADOG_APT_KEYRING="/usr/share/keyrings/datadog-archive-keyring.gpg"
COPY datadog/DATADOG_APT_KEY_*.public /tmp
# hadolint ignore=DL3008
RUN apt-get update -y && \
    apt-get install -y gnupg apt-transport-https gpg-agent curl ca-certificates openssh-server iproute2 && \
    echo "deb [signed-by=${DATADOG_APT_KEYRING}] https://apt.datadoghq.com/ stable 7" > /etc/apt/sources.list.d/datadog.list && \
    touch ${DATADOG_APT_KEYRING} && \
    gpg --ignore-time-conflict --no-default-keyring --keyring ${DATADOG_APT_KEYRING} --import /tmp/DATADOG_APT_KEY_CURRENT.public && \
    gpg --ignore-time-conflict --no-default-keyring --keyring ${DATADOG_APT_KEYRING} --import /tmp/DATADOG_APT_KEY_F14F620E.public && \
    gpg --ignore-time-conflict --no-default-keyring --keyring ${DATADOG_APT_KEYRING} --import /tmp/DATADOG_APT_KEY_382E94DE.public && \
    apt-get update && apt-get -y --force-yes install --reinstall datadog-agent=${DD_AGENT_VERSION} && \
    apt-get purge -y linux-libc-dev && \
    apt-get autoremove --purge -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*

RUN datadog-agent integration install -t -r datadog-mergify==$DD_MERGIFY_VERSION
COPY datadog-wrapper.sh /
COPY datadog/conf.d/mergify.yaml /etc/datadog-agent/conf.d/mergify.d/conf.yaml
COPY datadog/conf.d/redisdb.yaml /etc/datadog-agent/conf.d/redisdb.d/conf.yaml
COPY datadog/conf.d/postgres.yaml /etc/datadog-agent/conf.d/postgres.d/conf.yaml
# Chown to be able to edit all those config files with the datadog-wrapper
# because we don't run the script as root.
RUN chown -R mergify:mergify /etc/datadog-agent && chown -R mergify:mergify /var/log/datadog


FROM system-base as runner-base
ARG PYTHON_VERSION
ARG MERGIFYENGINE_SHA
LABEL python.version="$PYTHON_VERSION"
LABEL mergify-engine.sha="$MERGIFYENGINE_SHA"
ENV MERGIFYENGINE_SHA=$MERGIFYENGINE_SHA
RUN test -n "$PYTHON_VERSION" && test -n "$MERGIFYENGINE_SHA"
# hadolint ignore=DL4005
RUN rm /bin/sh && ln -s /bin/bash /bin/sh

COPY --from=python-builder /app /app
WORKDIR /app
ENV VIRTUAL_ENV=/app/.venv
ENV PYTHONUNBUFFERED=1
ENV PATH="/app/.venv/bin:${PATH}"
USER mergify

# ALL LAYER ABOVE MUST BE THE SAME FOR ALL VERSIONS, BUILD ARGS MUST BE THE SAME FOR ALL VERSIONS
### We don't put MERGIFYENGINE_VERSION inside runner-base, to ensure runner-base is the same layer between onpremise and saas
FROM runner-base as runner-tagged
ARG MERGIFYENGINE_VERSION
LABEL mergify-engine.version="$MERGIFYENGINE_VERSION"
ENV MERGIFYENGINE_VERSION=$MERGIFYENGINE_VERSION
RUN test -n "$MERGIFYENGINE_VERSION"

