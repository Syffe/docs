{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "MergifyConfig#",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "extends": {
      "type": "string"
    },
    "queue_rules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/QueueRule"
      }
    },
    "pull_request_rules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PullRequestRule"
      }
    }
  },
  "title": "MergifyConfig",
  "definitions": {
    "PullRequestAttribute": {
      "enum": [
        {
          "key": "approved-reviews-by",
          "inputType": "userSingle",
          "dataType": "list of string",
          "description": "The list of GitHub user or team login that approved the pull request. Team logins are prefixed with the `@` character and must belong to the repository organization. This only matches reviewers with `admin`, `write` or `maintain` permission on the repository."
        },
        {
          "key": "assignee",
          "inputType": "userSingle",
          "dataType": "list of string",
          "description": "The list of GitHub user or team login that are assigned to the pull request. Team logins are prefixed with the `@` character and must belong to the repository organization."
        },
        {
          "key": "author",
          "inputType": "userSingle",
          "dataType": "string",
          "description": "The GitHub user or team login of the author of the pull request. Team logins are prefixed with the `@` character and must belong to the repository organization."
        },
        {
          "key": "base",
          "inputType": "branchSingle",
          "dataType": "string",
          "description": "The name of the branch the pull request should be pulled into."
        },
        {
          "key": "body",
          "inputType": "string",
          "dataType": "string",
          "description": "The content of the pull request description without Markdown/HTML comments."
        },
        {
          "key": "body-raw",
          "inputType": "string",
          "dataType": "string",
          "description": "The content of the pull request description."
        },
        {
          "key": "branch-protection-review-decision",
          "inputType": "string",
          "dataType": "string",
          "description": "The review decision, could be one of `APPROVED`, `CHANGES_REQUESTED` or `REVIEW_REQUIRED`. This indicates if `CODEOWNERS` have reviewed the pull request when the Require Review from Code Owners branch protection rule is enabled."
        },
        {
          "key": "changes-requested-reviews-by",
          "inputType": "userSingle",
          "dataType": "list of string",
          "description": "The list of GitHub user or team login that have requested changes in a review for the pull request. Team logins are prefixed with the @ character and must belong to the repository organization. This only matches reviewers with admin, write or maintain permission on the repository."
        },
        {
          "key": "check-failure",
          "inputType": "check",
          "dataType": "list of string",
          "description": "The list of status checks that failed for the pull request. This is the name of a status check such as continuous-integration/travis-ci/pr or of a check run such as Travis CI - Pull Request. See About Status Checks for more details. Checks that report being cancelled, timed out, and action required are also considered as failures."
        },
        {
          "key": "check-neutral",
          "inputType": "check",
          "dataType": "list of string",
          "description": "The list of status checks that are neutral for the pull request. This is the name of a status check such as continuous-integration/travis-ci/pr or of a check run such as Travis CI - Pull Request. See About Status Checks for more details."
        },
        {
          "key": "check-pending",
          "inputType": "check",
          "dataType": "list of string",
          "description": "The list of status checks that is pending for the pull request. This is the name of a status check such as continuous-integration/travis-ci/pr or of a check run such as Travis CI - Pull Request. See About Status Checks for more details."
        },
        {
          "key": "check-skipped",
          "inputType": "check",
          "dataType": "list of string",
          "description": "The list of status checks that was skipped for the pull request. This is the name of a status check such as continuous-integration/travis-ci/pr or of a check run such as Travis CI - Pull Request. See About Status Checks for more details."
        },
        {
          "key": "check-stale",
          "inputType": "check",
          "dataType": "list of string",
          "description": "The list of status checks that are stale for the pull request. This is the name of a status check such as continuous-integration/travis-ci/pr or of a check run such as Travis CI - Pull Request. See About Status Checks for more details."
        },
        {
          "key": "check-success",
          "inputType": "check",
          "dataType": "list of string",
          "description": "The list of status checks that successfully passed for the pull request. This is the name of a status check such as continuous-integration/travis-ci/pr or of a check run such as Travis CI - Pull Request. See About Status Checks for more details."
        },
        {
          "key": "check-timed-out",
          "inputType": "check",
          "dataType": "list of string",
          "description": "The list of status checks that timed out for the pull request. This is the name of a status check such as continuous-integration/travis-ci/pr or of a check run such as Travis CI - Pull Request. See About Status Checks for more details."
        },
        {
          "key": "closed",
          "inputType": "boolean",
          "dataType": "boolean",
          "description": "Whether the pull request is closed."
        },
        {
          "$ref": "#/definitions/TimestampOrRelativeTimestamp",
          "key": "closed-at",
          "inputType": "relativeTimestamp",
          "dataType": "Timestamp or Relative timestamp",
          "description": "The time the pull request was closed at."
        },
        {
          "key": "commented-reviews-by",
          "inputType": "userSingle",
          "dataType": "list of string",
          "description": "The list of GitHub user or team login that have commented in a review for the pull request. Team logins are prefixed with the @ character and must belong to the repository organization. This only matches reviewers with admin, write or maintain permission on the repository."
        },
        {
          "key": "commits",
          "inputType": "string",
          "dataType": "list of commits",
          "description": "The list of commits of the pull request. The index 0 is the first commit of the pull request, while -1 is the last commit of the pull request."
        },
        {
          "key": "commits-behind",
          "inputType": "string",
          "dataType": "list of commits",
          "description": "The list of commits between the head of the base branch and the base of the pull request. This can only be used with the length operator as #commits-behind."
        },
        {
          "key": "commits-unverified",
          "inputType": "string",
          "dataType": "list of string",
          "description": "The list of commit messages that are marked as unverified by GitHub."
        },
        {
          "key": "conflict",
          "inputType": "boolean",
          "dataType": "boolean",
          "description": "Whether the pull request is conflicting with its base branch."
        },
        {
          "$ref": "#/definitions/TimestampOrRelativeTimestamp",
          "key": "created-at",
          "inputType": "relativeTimestamp",
          "dataType": "Timestamp or Relative timestamp",
          "description": "The time the pull request was created at."
        },
        {
          "key": "dependabot-dependency-name",
          "inputType": "string",
          "dataType": "string",
          "description": "The dependency-name value included in the Dependabot commit message."
        },
        {
          "key": "dependabot-dependency-type",
          "inputType": "string",
          "dataType": "string",
          "description": "The dependency-type value included in the Dependabot commit message."
        },
        {
          "key": "dependabot-update-type",
          "inputType": "string",
          "dataType": "string",
          "description": "The update-type value included in the Dependabot commit message."
        },
        {
          "key": "dismissed-reviews-by",
          "inputType": "userSingle",
          "dataType": "list of string",
          "description": "The list of GitHub user or team login that have their review dismissed in the pull request. Team logins are prefixed with the @ character and must belong to the repository organization. This only matches reviewers with admin, write or maintain permission on the repository."
        },
        {
          "key": "draft",
          "inputType": "boolean",
          "dataType": "boolean",
          "description": "Whether the pull request is in draft state."
        },
        {
          "key": "files",
          "inputType": "string",
          "dataType": "list of string",
          "description": "The files that are modified, deleted or added by the pull request."
        },
        {
          "key": "head",
          "inputType": "branchSingle",
          "dataType": "string",
          "description": "The name of the branch where the pull request changes are implemented."
        },
        {
          "key": "label",
          "inputType": "labelSingle",
          "dataType": "list of string",
          "description": "The list of labels of the pull request."
        },
        {
          "key": "linear-history",
          "inputType": "boolean",
          "dataType": "boolean",
          "description": "Whether the pull request commits history is linear (no merge commit)."
        },
        {
          "key": "locked",
          "inputType": "boolean",
          "dataType": "boolean",
          "description": "Whether the pull request is locked."
        },
        {
          "key": "merged",
          "inputType": "boolean",
          "dataType": "boolean",
          "description": "Whether the pull request is merged. This attribute doesn't work on pull requests merged before a rule using this attribute is created."
        },
        {
          "$ref": "#/definitions/TimestampOrRelativeTimestamp",
          "key": "merged-at",
          "inputType": "relativeTimestamp",
          "dataType": "Timestamp or Relative timestamp",
          "description": "The time the pull request was merged at."
        },
        {
          "key": "merged-by",
          "inputType": "string",
          "dataType": "string",
          "description": "The GitHub user or team login that merged the pull request. Team logins are prefixed with the @ character and must belong to the repository organization."
        },
        {
          "key": "milestone",
          "inputType": "string",
          "dataType": "string",
          "description": "The milestone title associated to the pull request."
        },
        {
          "key": "number",
          "inputType": "string",
          "dataType": "integer",
          "description": "The pull request number."
        },
        {
          "key": "queue-partition-name",
          "inputType": "string",
          "dataType": "list of string",
          "description": "The name of the partitions the pull request is queued in."
        },
        {
          "key": "queue-position",
          "inputType": "number",
          "dataType": "integer",
          "description": "The position of the pull request in its queue if queued.\nThe first pull request in the queue has position 0.\nThe value is set to -1 if the pull request is not queued.\nNB: If you are using partitions, this condition returns the maximum position of the pull request from all the partitions it is queued in."
        },
        {
          "$ref": "#/definitions/TimestampOrRelativeTimestamp",
          "key": "queued-at",
          "inputType": "relativeTimestamp",
          "dataType": "Timestamp or Relative timestamp",
          "description": "The time the pull request was queued at for merge."
        },
        {
          "$ref": "#/definitions/TimestampOrRelativeTimestamp",
          "key": "queue-merge-started-at",
          "inputType": "relativeTimestamp",
          "dataType": "Timestamp or Relative timestamp",
          "description": "The time the pull request mergeability checks have started at. \nNB: This attribute does not work when using Partition Rules."
        },
        {
          "key": "repository-full-name",
          "inputType": "string",
          "dataType": "string",
          "description": "The current repository full name (complete version with the organization name)."
        },
        {
          "key": "repository-name",
          "inputType": "string",
          "dataType": "string",
          "description": "The current repository name (short version without the organization name)."
        },
        {
          "key": "review-requested",
          "inputType": "userSingle",
          "dataType": "list of string",
          "description": "The list of GitHub user or team login that were requested to review the pull request. Team logins are prefixed with the @ character and must belong to the repository organization. This only matches reviewers with admin, write or maintain permission on the repository."
        },
        {
          "key": "review-threads-resolved",
          "inputType": "string",
          "dataType": "list of string",
          "description": "The list of bodies associated to review threads that are marked as resolved by GitHub."
        },
        {
          "key": "review-threads-unresolved",
          "inputType": "string",
          "dataType": "list of string",
          "description": "The list of bodies associated to review threads that are NOT marked as resolved by GitHub."
        },
        {
          "key": "schedule",
          "inputType": "string",
          "dataType": "Schedule",
          "description": "The current time will be compared against this schedule to un/validate this attribute."
        },
        {
          "key": "title",
          "inputType": "string",
          "dataType": "string",
          "description": "The title of the pull request."
        },
        {
          "$ref": "#/definitions/TimestampOrRelativeTimestamp",
          "key": "updated-at",
          "inputType": "relativeTimestamp",
          "dataType": "Timestamp or Relative timestamp",
          "description": "The time the pull request was updated at."
        }
      ]
    },
    "StringArray": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "default": []
    },
    "LoginArray": {
      "$id": "#/LoginArray",
      "default": [
        ""
      ],
      "anyOf": [
        {
          "dataType": "list of string",
          "$ref": "#/definitions/StringArray"
        },
        {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "weight": {
                "type": "number"
              }
            }
          }
        }
      ]
    },
    "Template": {
      "$id": "#/Template",
      "default": "",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ]
    },
    "Duration": {
      "$id": "#/Duration",
      "type": "string",
      "default": ""
    },
    "ConditionString": {
      "$id": "#/ConditionString",
      "type": "string",
      "default": ""
    },
    "TemplateArray": {
      "$id": "#/TemplateArray",
      "type": "array",
      "default": [],
      "items": {
        "valueType": "Template",
        "$ref": "#/definitions/Template"
      }
    },
    "LabelArray": {
      "$id": "#/LabelArray",
      "type": "array",
      "default": [],
      "items": {
        "valueType": "Template",
        "$ref": "#/definitions/Template"
      }
    },
    "UserArray": {
      "$id": "#/UserArray",
      "type": "array",
      "default": [],
      "items": {
        "valueType": "Template",
        "$ref": "#/definitions/Template"
      }
    },
    "BranchArray": {
      "$id": "#/BranchArray",
      "type": "array",
      "default": [],
      "items": {
        "type": "string"
      }
    },
    "PriorityRule": {
      "$id": "#/PriorityRule",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionString"
          }
        },
        "priority": {
          "$ref": "#/definitions/Priority"
        }
      }
    },
    "Priority": {
      "$id": "#/Priority",
      "anyOf": [
        {
          "type": "number",
          "minimum": 1,
          "maximum": 10000
        },
        {
          "enum": [
            "low",
            "medium",
            "high"
          ]
        }
      ]
    },
    "MergeMethod": {
      "$id": "#/MergeMethod",
      "enum": [
        "merge",
        "squash",
        "rebase",
        "fast-forward"
      ]
    },
    "Timestamp": {
      "$id": "#/Timestamp",
      "type": "string"
    },
    "RelativeTimestamp": {
      "$id": "#/RelativeTimestamp",
      "type": "string"
    },
    "TimestampOrRelativeTimestamp": {
      "$id": "#/TimestampOrRelativeTimestamp",
      "anyOf": [
        {
          "$ref": "#/definitions/Timestamp"
        },
        {
          "$ref": "#/definitions/RelativeTimestamp"
        }
      ]
    },
    "PullRequestRule": {
      "$id": "#/PullRequestRule",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/RuleCondition"
              },
              {
                "$ref": "#/definitions/ConditionString"
              }
            ]
          }
        },
        "actions": {
          "$ref": "#/definitions/Actions"
        }
      },
      "required": [
        "conditions",
        "name",
        "actions"
      ],
      "title": "PullRequestRule"
    },
    "QueueRule": {
      "$id": "#/QueueRule",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "allow_checks_interruption": {
          "type": "boolean",
          "default": true
        },
        "allow_inplace_checks": {
          "type": "boolean",
          "default": true
        },
        "allow_queue_branch_edit": {
          "type": "boolean",
          "default": false
        },
        "batch_max_failure_resolution_attempts": {
          "type": "number"
        },
        "batch_max_wait_time": {
          "$ref": "#/definitions/Duration",
          "default": "30 s"
        },
        "batch_size": {
          "type": "number",
          "default": 1,
          "minimum": 1,
          "maximum": 20
        },
        "checks_timeout": {
          "$ref": "#/definitions/Duration"
        },
        "commit_message_template": {
          "valueType": "Template",
          "$ref": "#/definitions/Template"
        },
        "disallow_checks_interruption_from_queues": {
          "dataType": "list of string",
          "$ref": "#/definitions/StringArray"
        },
        "draft_bot_account": {
          "type": "string"
        },
        "merge_bot_account": {
          "valueType": "Template",
          "$ref": "#/definitions/Template"
        },
        "update_bot_account": {
          "valueType": "Template",
          "$ref": "#/definitions/Template"
        },
        "merge_conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleCondition"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuleCondition"
          }
        },
        "merge_method": {
          "$ref": "#/definitions/MergeMethod"
        },
        "priority_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriorityRule"
          }
        },
        "queue_branch_merge_method": {
          "type": "string",
          "default": "none"
        },
        "queue_branch_prefix": {
          "type": "string",
          "default": "mergify/merge-queue/"
        },
        "speculative_checks": {
          "type": "number",
          "default": 1,
          "minimum": 1,
          "maximum": 20
        },
        "update_method": {
          "type": "string",
          "enum": [
            "merge",
            "rebase"
          ]
        }
      }
    },
    "RuleCondition": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/RuleCondition"
              },
              {
                "$ref": "#/definitions/ConditionString"
              }
            ]
          }
        },
        {
          "type": "object",
          "propertyNames": {
            "enum": [
              "or",
              "and",
              "not"
            ]
          },
          "patternProperties": {
            "": {
              "$ref": "#/definitions/RuleCondition"
            }
          }
        }
      ],
      "title": "RuleCondition"
    },
    "Actions": {
      "type": "object",
      "properties": {
        "assign": {
          "type": "object",
          "properties": {
            "add_users": {
              "valueType": "list of Template",
              "default": "",
              "description": "The users to assign to the pull request.",
              "$ref": "#/definitions/UserArray"
            },
            "remove_users": {
              "valueType": "list of Template",
              "default": "",
              "description": "The users to remove from assignees.",
              "$ref": "#/definitions/UserArray"
            }
          }
        },
        "backport": {
          "type": "object",
          "properties": {
            "assignees": {
              "default": "",
              "description": "Users to assign the newly created pull request. As the type is a data type template, you could use, e.g., `{{author}}` to assign the pull request to its original author.",
              "valueType": "list of Template",
              "$ref": "#/definitions/TemplateArray"
            },
            "body": {
              "description": "The pull request body.",
              "valueType": "Template",
              "default": "This is an automatic backport of pull request #{{number}} done by [Mergify](https://mergify.com).\n{{cherry_pick_error}}",
              "$ref": "#/definitions/Template"
            },
            "bot_account": {
              "description": "Mergify can impersonate a GitHub user to backport a pull request. If no `bot_account` is set, Mergify backports the pull request itself.",
              "valueType": "Template",
              "default": "",
              "$ref": "#/definitions/Template"
            },
            "branches": {
              "description": "The list of branches the pull request should be copied to.",
              "valueType": "list of string",
              "default": "[]",
              "$ref": "#/definitions/BranchArray"
            },
            "ignore_conflicts": {
              "valueType": "Boolean",
              "description": "Whether to create the pull requests even if they are conflicts when cherry-picking the commits.",
              "type": "boolean",
              "default": true
            },
            "labels": {
              "description": "The list of labels to add to the created pull requests.",
              "valueType": "list of string",
              "default": "[]",
              "$ref": "#/definitions/StringArray"
            },
            "label_conflicts": {
              "valueType": "string",
              "default": "conflicts",
              "description": "The label to add to the created pull request if it has conflicts and `ignore_conflicts` is set to `true`.",
              "type": "string"
            },
            "regexes": {
              "description": "The list of regexes to find branches the pull request should be copied to.",
              "valueType": "list of string",
              "default": "[]",
              "$ref": "#/definitions/StringArray"
            },
            "title": {
              "description": "The pull request title.",
              "valueType": "Template",
              "default": "{{ title }} (backport #{{ number }})",
              "$ref": "#/definitions/Template"
            }
          }
        },
        "close": {
          "type": "object",
          "properties": {
            "message": {
              "valueType": "Template",
              "default": "This pull request has been automatically closed by Mergify.",
              "description": "The `message` to write as a comment after closing the pull request.",
              "$ref": "#/definitions/Template"
            }
          }
        },
        "copy": {
          "type": "object",
          "properties": {
            "assignees": {
              "description": "Users to assign the newly created pull request. As the type is Template, you could use, e.g., {{author}} to assign the pull request to its original author.",
              "default": "",
              "valueType": "list of Template",
              "$ref": "#/definitions/TemplateArray"
            },
            "body": {
              "description": "The pull request body.",
              "default": "This is an automatic copy of pull request #{{number}} done by [Mergify](https://mergify.com).\n{{cherry_pick_error}}",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            },
            "bot_account": {
              "description": "Mergify can impersonate a GitHub user to copy a pull request. If no bot_account is set, Mergify copies the pull request itself.",
              "default": "",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            },
            "branches": {
              "description": "The list of branches the pull request should be copied to.",
              "default": "[]",
              "valueType": "list of string",
              "$ref": "#/definitions/BranchArray"
            },
            "ignore_conflicts": {
              "description": "Whether to create the pull requests even if they are conflicts when cherry-picking the commits.",
              "default": "true",
              "type": "boolean"
            },
            "labels": {
              "description": "The list of labels to add to the created pull requests.",
              "default": "[]",
              "valueType": "list of string",
              "$ref": "#/definitions/StringArray"
            },
            "label_conflicts": {
              "description": "The label to add to the created pull request if it has conflicts and ignore_conflicts is set to true.",
              "default": "conflicts",
              "valueType": "string",
              "type": "string"
            },
            "regexes": {
              "description": "The list of regexes to find branches the pull request should be copied to.",
              "default": "[]",
              "valueType": "list of string",
              "$ref": "#/definitions/StringArray"
            },
            "title": {
              "description": "The pull request title.",
              "default": "{{ title }} (copy #{{ number }})",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            }
          }
        },
        "comment": {
          "type": "object",
          "properties": {
            "bot_account": {
              "valueType": "Template",
              "description": "Mergify can impersonate a GitHub user to comment a pull request. If no `bot_account` is set, Mergify will comment the pull request itself.",
              "$ref": "#/definitions/Template"
            },
            "message": {
              "valueType": "Template",
              "description": "The message to write as a comment.",
              "$ref": "#/definitions/Template"
            }
          }
        },
        "delete_head_branch": {
          "type": "object",
          "properties": {
            "force": {
              "type": "boolean",
              "valueType": "Boolean",
              "default": false,
              "description": "If set to `true`, the branch will be deleted even if another pull request depends on the head branch. GitHub will therefore close the dependent pull requests."
            }
          }
        },
        "dismiss_reviews": {
          "type": "object",
          "properties": {
            "approved": {
              "valueType": "Boolean or list of string",
              "description": "If set to `true`, all the approving reviews will be removed when the pull request is updated. If set to `false`, nothing will be done. If set to a list, each item should be the GitHub login of a user whose review will be removed. If set to `from_requested_reviewers`, the list of requested reviewers will be used to get whose review will be removed.",
              "default": true,
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "changes_requested": {
              "valueType": "Boolean or list of string",
              "description": "If set to `true`, all the reviews requesting changes will be removed when the pull request is updated. If set to `false`, nothing will be done. If set to a list, each item should be the GitHub login of a user whose review will be removed. If set to `from_requested_reviewers`, the list of requested reviewers will be used to get whose review will be removed.",
              "default": true,
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "message": {
              "description": "The message to post when dismissing the review.",
              "default": "Pull request has been modified.",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            },
            "when": {
              "valueType": "synchronize or always",
              "description": "If set to `synchronize`, the action will run only if the pull request commits changed. Otherwise, it will run each time the rule matches.",
              "default": "synchronize",
              "enum": [
                "synchronize",
                "always"
              ]
            }
          }
        },
        "edit": {
          "type": "object",
          "properties": {
            "draft": {
              "valueType": "Boolean",
              "description": "If the pull request should be a draft (`true`) or the other way around (`false`).",
              "default": "None",
              "type": "boolean"
            }
          }
        },
        "label": {
          "type": "object",
          "properties": {
            "add": {
              "valueType": "list of Template",
              "default": "[]",
              "description": "The list of labels to add.",
              "$ref": "#/definitions/LabelArray"
            },
            "remove": {
              "valueType": "list of Template",
              "default": "[]",
              "description": "The list of labels to remove.",
              "$ref": "#/definitions/LabelArray"
            },
            "toggle": {
              "valueType": "list of Template",
              "default": "[]",
              "description": "Toggle labels in the list based on the conditions. If all the conditions are a success, all the labels in the list will be added, otherwise, they will all be removed.",
              "$ref": "#/definitions/LabelArray"
            },
            "remove_all": {
              "valueType": "Boolean",
              "description": "Remove all labels from the pull request.",
              "type": "boolean",
              "default": false
            }
          }
        },
        "merge": {
          "type": "object",
          "properties": {
            "commit_message_template": {
              "valueType": "Template",
              "description": "Template to use as the commit message when using the `merge` or `squash` merge method.",
              "$ref": "#/definitions/Template"
            },
            "merge_bot_account": {
              "valueType": "Template",
              "description": "Mergify can impersonate a GitHub user to merge pull request. If no `merge_bot_account` is set, Mergify will merge the pull request itself. The user account **must** have already been logged in Mergify dashboard once and have **write** or **maintain** permission.",
              "$ref": "#/definitions/Template"
            },
            "method": {
              "valueType": "string",
              "description": "Merge method to use. Possible values are `merge`, `squash`, `rebase` or `fast-forward`.",
              "$ref": "#/definitions/MergeMethod",
              "default": "merge"
            },
            "allow_merging_configuration_change": {
              "type": "boolean",
              "valueType": "Boolean",
              "description": "Allow merging Mergify configuration change.",
              "default": false
            }
          }
        },
        "post_check": {
          "type": "object",
          "properties": {
            "success_conditions": {
              "valueType": "list of conditions",
              "type": "array",
              "description": "List of conditions to match to mark the pull request check as succeeded, otherwise, it will be marked as failing. If unset, the conditions from the rule that triggers this action are used.",
              "default": [
                ""
              ],
              "items": {
                "$ref": "#/definitions/ConditionString"
              }
            },
            "summary": {
              "description": "The summary of the check.",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            },
            "title": {
              "description": "The title of the check.",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            }
          }
        },
        "queue": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "autosquash": {
              "valueType": "Boolean",
              "type": "boolean",
              "default": true,
              "description": "This option is relevant only if you do inplace checks and if you use the `rebase` option of the `update_method`. It will automatically squash your commits beginning by `squash!`, `fixup!` or `amend!`, just like the option with the same name when doing a `git rebase`.",
              "$ref": "#/definitions/Template"
            },
            "commit_message_template": {
              "description": "Template to use as the commit message when using the `merge` or `squash` merge method. This option has been moved under the queue rules section of the configuration and will be removed from this section in the future.",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            },
            "merge_bot_account": {
              "valueType": "Template",
              "description": "Mergify can impersonate a GitHub user to merge pull request. If no `merge_bot_account` is set, Mergify will merge the pull request itself. The user account **must** have already been logged in Mergify dashboard once and have **write** or **maintain** permission.\n This option overrides the value defined in the queue rules section of the configuration.",
              "$ref": "#/definitions/Template"
            },
            "method": {
              "valueType": "string",
              "description": "Merge method to use. Possible values are `merge`, `squash`, `rebase` or `fast-forward`. `fast-forward` is not supported on queues with `speculative_checks > 1`, `batch_size > 1`, or with `allow_inplace_checks` set to `false`.\n This option overrides the value defined in the queue rules section of the configuration.",
              "enum": [
                "merge",
                "squash",
                "rebase",
                "fast-forward"
              ]
            },
            "name": {
              "type": "string",
              "default": "default",
              "description": "The name of the queue where the pull request should be added. If no name is set, `routing_conditions` will be applied instead."
            },
            "priority": {
              "$ref": "#/definitions/Priority",
              "default": "medium",
              "valueType": "1 <= integer <= 10000 or `low` or `medium` or `high`",
              "deprecated": true,
              "description": "To set your priorities, you should now use `priority_rules`. This sets the priority of the pull request in the queue. The pull request with the highest priority is merged first. `low`, `medium`, `high` are aliases for `1000`, `2000`, `3000`."
            },
            "allow_merging_configuration_change": {
              "valueType": "Boolean",
              "type": "boolean",
              "default": false,
              "description": "Allow merging Mergify configuration change."
            },
            "rebase_fallback": {
              "enum": [
                "merge",
                "squash",
                "none"
              ],
              "default": "none",
              "description": "Deprecated 😵\n If method is set to rebase, but the pull request cannot be rebased, the method defined in rebase_fallback will be used instead. Possible values are merge, squash, none. none will report an error if rebase is not possible. This option is deprecated and will be removed on March 13th, 2023."
            },
            "require_branch_protection": {
              "type": "boolean",
              "valueType": "Boolean",
              "default": true,
              "description": "Whether branch protections are required for queueing pull requests."
            },
            "update_bot_account": {
              "valueType": "Template",
              "$ref": "#/definitions/Template",
              "description": "For certain actions, such as rebasing branches, Mergify has to impersonate a GitHub user. You can specify the account to use with this option. If no `update_bot_account` is set, Mergify picks randomly one of the organization users instead. The user account **must** have already been logged in Mergify dashboard once.\n\n This option overrides the value defined in the queue rules section of the configuration."
            },
            "update_method": {
              "valueType": "string",
              "description": "`merge` for all merge methods except `fast-forward` where `rebase` is used Method to use to update the pull request with its base branch when the speculative check is done in-place. Possible values: \n * `merge` to merge the base branch into the pull request. * `rebase` to rebase the pull request against its base branch. \n This option overrides the value defined in the queue rules section of the configuration.",
              "enum": [
                "merge",
                "rebase"
              ]
            }
          }
        },
        "rebase": {
          "type": "object",
          "properties": {
            "autosquash": {
              "valueType": "Boolean",
              "type": "boolean",
              "default": true,
              "description": "When set to `True`, commits starting with `fixup!`, `squash!` and `amend!`are squashed during the rebase."
            },
            "bot_account": {
              "valueType": "Template",
              "$ref": "#/definitions/Template",
              "description": "To rebase, Mergify needs to impersonate a GitHub user. You can specify the account to use with this option. If no `bot_account` is set, Mergify picks the pull request author. The user account **must** have already been logged in Mergify dashboard once."
            }
          }
        },
        "request_reviews": {
          "type": "object",
          "properties": {
            "users": {
              "description": "The username to request reviews from.",
              "$ref": "#/definitions/LoginArray",
              "valueType": "list of string or dictionary of login and weight"
            },
            "users_from_teams": {
              "description": "The team names to get the list of users to request reviews from.",
              "$ref": "#/definitions/LoginArray",
              "valueType": "list of string or dictionary of login and weight"
            },
            "teams": {
              "description": "The team name to request reviews from.",
              "$ref": "#/definitions/LoginArray",
              "valueType": "list of string or dictionary of login and weight"
            },
            "bot_account": {
              "description": "Mergify can impersonate a GitHub user to request a review on a pull request. If no `bot_account` is set, Mergify will request the review itself.",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            },
            "random_count": {
              "description": "Pick random users and teams from the provided lists. When `random_count` is specified, `users` and `teams` can be a dictionary where the key is the login and the value is the weight to use. Weight must be between 1 and 65535 included.",
              "valueType": "integer between 1 and 15",
              "type": "number",
              "minimum": 1,
              "maximum": 15
            }
          }
        },
        "review": {
          "type": "object",
          "properties": {
            "bot_account": {
              "valueType": "Template",
              "description": "Mergify can impersonate a GitHub user to review a pull request. If no `bot_account` is set, Mergify will review the pull request itself.",
              "$ref": "#/definitions/Template"
            },
            "message": {
              "valueType": "Template",
              "description": "The message to write as a comment.",
              "$ref": "#/definitions/Template"
            },
            "type": {
              "default": "APPROVE",
              "valueType": "string",
              "description": "The kind of review, can be `APPROVE`, `REQUEST_CHANGES`, `COMMENT`",
              "enum": [
                "APPROVE",
                "REQUEST_CHANGES",
                "COMMENT"
              ]
            }
          }
        },
        "update": {
          "type": "object",
          "properties": {
            "bot_account": {
              "description": "Mergify can impersonate a GitHub user to review a pull request. If no `bot_account` is set, Mergify will update the pull request itself.",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            }
          }
        },
        "squash": {
          "type": "object",
          "properties": {
            "bot_account": {
              "description": "Mergify can impersonate a GitHub user to review a pull request. If no `bot_account` is set, Mergify will squash the pull request itself.",
              "valueType": "Template",
              "$ref": "#/definitions/Template"
            },
            "commit_message": {
              "valueType": "string",
              "description": "Defines what commit message to use for the squashed commit if no commit message is defined in the pull request body. Possible values are:\n- `all-commits` to use the same format as GitHub squashed merge commit.\n- `first-commit` to use the message of the first commit of the pull request.\n- `title+body` means to use the title and body from the pull request itself as the commit message. The pull request number will be added to end of the title.",
              "enum": [
                "all-commits",
                "first-commit",
                "title+body"
              ],
              "default": "all-commits"
            }
          }
        }
      },
      "title": "Actions"
    }
  }
}
