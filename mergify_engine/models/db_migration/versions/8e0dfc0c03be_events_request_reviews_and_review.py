"""Events request_reviews and review

Revision ID: 8e0dfc0c03be
Revises: 2c28d483d111
Create Date: 2023-07-20 13:23:20.819230

"""
import alembic
import sqlalchemy


revision = "8e0dfc0c03be"
down_revision = "2c28d483d111"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    alembic.op.create_table(
        "event_action_request_reviews",
        sqlalchemy.Column("id", sqlalchemy.BigInteger(), nullable=False),
        sqlalchemy.Column(
            "reviewers",
            sqlalchemy.ARRAY(sqlalchemy.Text(), dimensions=1),
            nullable=False,
        ),
        sqlalchemy.Column(
            "team_reviewers",
            sqlalchemy.ARRAY(sqlalchemy.Text(), dimensions=1),
            nullable=False,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_action_request_reviews_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_action_request_reviews_pkey"),
        ),
    )
    alembic.op.create_table(
        "event_action_review",
        sqlalchemy.Column("id", sqlalchemy.BigInteger(), nullable=False),
        sqlalchemy.Column(
            "review_type",
            sqlalchemy.Enum("APPROVE", "REQUEST_CHANGES", "COMMENT", name="reviewtype"),
            nullable=True,
        ),
        sqlalchemy.Column("reviewer", sqlalchemy.Text(), nullable=True),
        sqlalchemy.Column("message", sqlalchemy.Text(), nullable=True),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_action_review_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_action_review_pkey"),
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # NOTE(sileht): We don't want to support downgrades as it means we will
    # drop columns. And we don't want to provide tooling that may drop data.
    # For restoring old version of the database, the only supported process is
    # to use a backup.
    pass
