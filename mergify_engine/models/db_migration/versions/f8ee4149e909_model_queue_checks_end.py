"""Model queue_checks_end

Revision ID: f8ee4149e909
Revises: eb3c1af482b2
Create Date: 2023-07-21 11:36:32.739987

"""
import alembic
import sqlalchemy


revision = "f8ee4149e909"
down_revision = "eb3c1af482b2"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    alembic.op.create_table(
        "event_action_queue_checks_end",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "branch",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 7)",
        ),
        sqlalchemy.Column(
            "partition_name",
            sqlalchemy.Text(),
            nullable=True,
            anonymizer_config="anon.lorem_ipsum( characters := 7)",
        ),
        sqlalchemy.Column(
            "position",
            sqlalchemy.Integer(),
            nullable=True,
            anonymizer_config="anon.random_int_between(0, 50)",
        ),
        sqlalchemy.Column(
            "queue_name",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 7)",
        ),
        sqlalchemy.Column(
            "queued_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=False,
            anonymizer_config="anon.dnoise(queued_at, ''2 days'')",
        ),
        sqlalchemy.Column(
            "aborted",
            sqlalchemy.Boolean(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "abort_code",
            sqlalchemy.Enum(
                "PR_DEQUEUED",
                "PR_AHEAD_DEQUEUED",
                "PR_AHEAD_FAILED_TO_MERGE",
                "PR_WITH_HIGHER_PRIORITY_QUEUED",
                "PR_QUEUED_TWICE",
                "SPECULATIVE_CHECK_NUMBER_REDUCED",
                "CHECKS_TIMEOUT",
                "CHECKS_FAILED",
                "QUEUE_RULE_MISSING",
                "UNEXPECTED_QUEUE_CHANGE",
                "PR_FROZEN_NO_CASCADING",
                "TARGET_BRANCH_MISSING",
                "TARGET_BRANCH_CHANGED",
                "PR_UNEXPECTEDLY_FAILED_TO_MERGE",
                "BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS",
                "PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE",
                name="queuechecksabortcode",
            ),
            nullable=True,
            anonymizer_config="anon.random_in_enum(abort_code)",
        ),
        sqlalchemy.Column(
            "abort_reason",
            sqlalchemy.Text(),
            nullable=True,
            anonymizer_config="anon.lorem_ipsum( words := 7 )",
        ),
        sqlalchemy.Column(
            "abort_status",
            sqlalchemy.Enum("DEFINITIVE", "REEMBARKED", name="queuechecksabortstatus"),
            nullable=False,
            anonymizer_config="anon.random_in_enum(abort_status)",
        ),
        sqlalchemy.Column(
            "unqueue_code",
            sqlalchemy.Enum(
                "PR_DEQUEUED",
                "PR_AHEAD_DEQUEUED",
                "PR_AHEAD_FAILED_TO_MERGE",
                "PR_WITH_HIGHER_PRIORITY_QUEUED",
                "PR_QUEUED_TWICE",
                "SPECULATIVE_CHECK_NUMBER_REDUCED",
                "CHECKS_TIMEOUT",
                "CHECKS_FAILED",
                "QUEUE_RULE_MISSING",
                "UNEXPECTED_QUEUE_CHANGE",
                "PR_FROZEN_NO_CASCADING",
                "TARGET_BRANCH_MISSING",
                "TARGET_BRANCH_CHANGED",
                "PR_UNEXPECTEDLY_FAILED_TO_MERGE",
                "BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS",
                "PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE",
                "PR_MERGED",
                name="queuechecksunqueuecode",
            ),
            nullable=True,
        ),
        sqlalchemy.Column(
            "speculative_check_pull_request_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_action_queue_checks_end_id_fkey"),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["speculative_check_pull_request_id"],
            ["speculative_check_pull_request.id"],
            name=alembic.op.f(
                "event_action_queue_checks_end_speculative_check_pull_request_id_fkey",
            ),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_action_queue_checks_end_pkey"),
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # NOTE(sileht): We don't want to support downgrades as it means we will
    # drop columns. And we don't want to provide tooling that may drop data.
    # For restoring old version of the database, the only supported process is
    # to use a backup.
    pass
