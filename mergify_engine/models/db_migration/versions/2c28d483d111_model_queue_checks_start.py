"""Model queue_checks_start

Revision ID: 2c28d483d111
Revises: 0305f7aaf9cc
Create Date: 2023-07-19 14:07:35.320411

"""
import alembic
import sqlalchemy
from sqlalchemy.dialects import postgresql


revision = "2c28d483d111"
down_revision = "0305f7aaf9cc"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    alembic.op.create_table(
        "speculative_check_pull_request",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            autoincrement=True,
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "number",
            sqlalchemy.Integer(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0, 50)",
        ),
        sqlalchemy.Column(
            "in_place",
            sqlalchemy.Boolean(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "checks_timed_out",
            sqlalchemy.Boolean(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "checks_started_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=True,
            anonymizer_config="anon.dnoise(checks_started_at, ''2 days'')",
        ),
        sqlalchemy.Column(
            "checks_ended_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=True,
            anonymizer_config="anon.dnoise(checks_ended_at, ''2 days'')",
        ),
        sqlalchemy.Column(
            "checks_conclusion",
            sqlalchemy.Enum(
                "SUCCESS",
                "FAILURE",
                "NEUTRAL",
                "CANCELLED",
                "SKIPPED",
                "STALE",
                "ACTION_REQUIRED",
                "TIMED_OUT",
                "ERROR",
                "PENDING",
                name="checkconclusionwithstatuses",
            ),
            nullable=True,
            anonymizer_config="anon.random_in_enum(checks_conclusion)",
        ),
        sqlalchemy.Column(
            "unsuccessful_checks",
            postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore [no-untyped-call]
            nullable=False,
            anonymizer_config="custom_masks.json_obj_array(0, 5, ARRAY['name', 'description', 'state', 'url', 'avatar_url'])",
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("speculative_check_pull_request_pkey"),
        ),
    )
    alembic.op.create_table(
        "event_action_queue_checks_start",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "branch",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 7)",
        ),
        sqlalchemy.Column(
            "partition_name",
            sqlalchemy.Text(),
            nullable=True,
            anonymizer_config="anon.lorem_ipsum( characters := 7)",
        ),
        sqlalchemy.Column(
            "position",
            sqlalchemy.Integer(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0, 50)",
        ),
        sqlalchemy.Column(
            "queue_name",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 7)",
        ),
        sqlalchemy.Column(
            "queued_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=False,
            anonymizer_config="anon.dnoise(queued_at, ''2 days'')",
        ),
        sqlalchemy.Column(
            "speculative_check_pull_request_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_action_queue_checks_start_id_fkey"),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["speculative_check_pull_request_id"],
            ["speculative_check_pull_request.id"],
            name=alembic.op.f(
                "event_action_queue_checks_start_speculative_check_pull_request_id_fkey",
            ),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_action_queue_checks_start_pkey"),
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # NOTE(sileht): We don't want to support downgrades as it means we will
    # drop columns. And we don't want to provide tooling that may drop data.
    # For restoring old version of the database, the only supported process is
    # to use a backup.
    pass
