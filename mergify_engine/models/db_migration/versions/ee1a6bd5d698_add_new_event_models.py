"""Add new event models

Revision ID: ee1a6bd5d698
Revises: 176199dd35b1
Create Date: 2023-06-22 15:58:02.189965

"""
import alembic
import sqlalchemy


revision = "ee1a6bd5d698"
down_revision = "7884d682c413"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    alembic.op.create_table(
        "event",
        sqlalchemy.Column(
            "id", sqlalchemy.BigInteger(), autoincrement=True, nullable=False
        ),
        sqlalchemy.Column("type", sqlalchemy.Text(), nullable=False),
        sqlalchemy.Column(
            "received_at",
            sqlalchemy.DateTime(timezone=True),
            server_default=sqlalchemy.text("now()"),
            nullable=False,
        ),
        sqlalchemy.Column("pull_request", sqlalchemy.Integer(), nullable=False),
        sqlalchemy.Column("trigger", sqlalchemy.Text(), nullable=False),
        sqlalchemy.Column("repository_id", sqlalchemy.BigInteger(), nullable=False),
        sqlalchemy.ForeignKeyConstraint(
            ["repository_id"],
            ["github_repository.id"],
            name=alembic.op.f("event_repository_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint("id", name=alembic.op.f("event_pkey")),
    )
    alembic.op.create_index(
        alembic.op.f("event_pull_request_idx"), "event", ["pull_request"], unique=False
    )
    alembic.op.create_index(
        alembic.op.f("event_type_idx"), "event", ["type"], unique=False
    )
    alembic.op.create_table(
        "event_action_assign",
        sqlalchemy.Column("id", sqlalchemy.BigInteger(), nullable=False),
        sqlalchemy.Column(
            "added", sqlalchemy.ARRAY(sqlalchemy.Text(), dimensions=1), nullable=False
        ),
        sqlalchemy.Column(
            "removed", sqlalchemy.ARRAY(sqlalchemy.Text(), dimensions=1), nullable=False
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"], ["event.id"], name=alembic.op.f("event_action_assign_id_fkey")
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id", name=alembic.op.f("event_action_assign_pkey")
        ),
    )
    alembic.op.create_table(
        "event_action_post_check",
        sqlalchemy.Column("id", sqlalchemy.BigInteger(), nullable=False),
        sqlalchemy.Column(
            "conclusion",
            sqlalchemy.Enum(
                "PENDING",
                "CANCELLED",
                "SUCCESS",
                "FAILURE",
                "SKIPPED",
                "NEUTRAL",
                "STALE",
                "ACTION_REQUIRED",
                "TIMED_OUT",
                name="checkconclusion",
            ),
            nullable=True,
        ),
        sqlalchemy.Column("title", sqlalchemy.Text(), nullable=False),
        sqlalchemy.Column("summary", sqlalchemy.Text(), nullable=False),
        sqlalchemy.ForeignKeyConstraint(
            ["id"], ["event.id"], name=alembic.op.f("event_action_post_check_id_fkey")
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id", name=alembic.op.f("event_action_post_check_pkey")
        ),
    )
    alembic.op.add_column(
        "github_repository",
        sqlalchemy.Column("name", sqlalchemy.Text(), nullable=False),
    )
    alembic.op.create_index(
        alembic.op.f("github_repository_name_idx"),
        "github_repository",
        ["name"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
