"""Events queue freeze and update

Revision ID: cac437b249cb
Revises: f8ee4149e909
Create Date: 2023-07-24 16:51:50.651719

"""
import alembic
import sqlalchemy


revision = "cac437b249cb"
down_revision = "f8ee4149e909"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    alembic.op.create_table(
        "event_queue_freeze_delete",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "queue_name",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 7 )",
        ),
        sqlalchemy.Column(
            "deleted_by_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["deleted_by_id"],
            ["github_authenticated_actor.id"],
            name=alembic.op.f("event_queue_freeze_delete_deleted_by_id_fkey"),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_queue_freeze_delete_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_queue_freeze_delete_pkey"),
        ),
    )
    alembic.op.create_table(
        "event_queue_freeze_update",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "queue_name",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 7 )",
        ),
        sqlalchemy.Column(
            "reason",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( words := 7 )",
        ),
        sqlalchemy.Column(
            "cascading",
            sqlalchemy.Boolean(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "updated_by_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_queue_freeze_update_id_fkey"),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["updated_by_id"],
            ["github_authenticated_actor.id"],
            name=alembic.op.f("event_queue_freeze_update_updated_by_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_queue_freeze_update_pkey"),
        ),
    )
    alembic.op.create_table(
        "event_queue_pause_create",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "reason",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( words := 7 )",
        ),
        sqlalchemy.Column(
            "created_by_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["created_by_id"],
            ["github_authenticated_actor.id"],
            name=alembic.op.f("event_queue_pause_create_created_by_id_fkey"),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_queue_pause_create_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_queue_pause_create_pkey"),
        ),
    )
    alembic.op.create_table(
        "event_queue_pause_delete",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "deleted_by_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["deleted_by_id"],
            ["github_authenticated_actor.id"],
            name=alembic.op.f("event_queue_pause_delete_deleted_by_id_fkey"),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_queue_pause_delete_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_queue_pause_delete_pkey"),
        ),
    )
    alembic.op.create_table(
        "event_queue_pause_update",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "reason",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( words := 7 )",
        ),
        sqlalchemy.Column(
            "updated_by_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["id"],
            ["event.id"],
            name=alembic.op.f("event_queue_pause_update_id_fkey"),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["updated_by_id"],
            ["github_authenticated_actor.id"],
            name=alembic.op.f("event_queue_pause_update_updated_by_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "id",
            name=alembic.op.f("event_queue_pause_update_pkey"),
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # NOTE(sileht): We don't want to support downgrades as it means we will
    # drop columns. And we don't want to provide tooling that may drop data.
    # For restoring old version of the database, the only supported process is
    # to use a backup.
    pass
