"""new github pull_request table

Revision ID: 5e8e1df744a6
Revises: e07cd24f7270
Create Date: 2023-10-16 17:01:18.416908

"""
import alembic
import sqlalchemy
from sqlalchemy.dialects import postgresql


revision = "5e8e1df744a6"
down_revision = "e07cd24f7270"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    alembic.op.create_table(
        "pull_request",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            autoincrement=False,
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "number",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config="anon.random_int_between(1,100000)",
        ),
        sqlalchemy.Column(
            "title",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( words := 5 )",
        ),
        sqlalchemy.Column(
            "state",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 7 )",
        ),
        sqlalchemy.Column(
            "body",
            sqlalchemy.Text(),
            nullable=True,
            anonymizer_config="anon.lorem_ipsum( words := 30 )",
        ),
        sqlalchemy.Column(
            "base",
            postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
            nullable=False,
            anonymizer_config="custom_masks.jsonb_obj(2, 2, ARRAY[''text''])",
        ),
        sqlalchemy.Column(
            "head",
            postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
            nullable=False,
            anonymizer_config="custom_masks.jsonb_obj(2, 2, ARRAY[''text''])",
        ),
        sqlalchemy.Column(
            "user_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config="anon.random_int_between(1,100000)",
        ),
        sqlalchemy.Column(
            "labels",
            sqlalchemy.ARRAY(
                postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
                dimensions=1,
            ),
            nullable=False,
            anonymizer_config="custom_masks.json_obj_array(0, 3, ARRAY['id', 'name', 'color', 'default']",
        ),
        sqlalchemy.Column(
            "draft",
            sqlalchemy.Boolean(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "html_url",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 20 )",
        ),
        sqlalchemy.Column(
            "issue_url",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 20 )",
        ),
        sqlalchemy.Column(
            "merged_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=True,
            anonymizer_config="anon.dnoise(merged_at, ''1 hour'')",
        ),
        sqlalchemy.Column(
            "updated_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=False,
            anonymizer_config="anon.dnoise(updated_at, ''1 hour'')",
        ),
        sqlalchemy.Column(
            "created_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=False,
            anonymizer_config="anon.dnoise(created_at, ''1 hour'')",
        ),
        sqlalchemy.Column(
            "closed_at",
            sqlalchemy.DateTime(timezone=True),
            nullable=True,
            anonymizer_config="anon.dnoise(closed_at, ''1 hour'')",
        ),
        sqlalchemy.Column(
            "node_id",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 10 )",
        ),
        sqlalchemy.Column(
            "locked",
            sqlalchemy.Boolean(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "requested_teams",
            sqlalchemy.ARRAY(
                postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
                dimensions=1,
            ),
            nullable=False,
            anonymizer_config="custom_masks.json_obj_array(0, 2, ARRAY['slug'])",
        ),
        sqlalchemy.Column(
            "milestone",
            postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
            nullable=True,
            anonymizer_config="custom_masks.jsonb_obj(3, 3, ARRAY[''text''])",
        ),
        sqlalchemy.Column(
            "merge_commit_sha",
            sqlalchemy.Text(),
            nullable=True,
            anonymizer_config="anon.lorem_ipsum( characters := 10 )",
        ),
        sqlalchemy.Column(
            "maintainer_can_modify",
            sqlalchemy.Boolean(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "merged",
            sqlalchemy.Boolean(),
            nullable=False,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "merged_by",
            postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
            nullable=True,
            anonymizer_config="custom_masks.jsonb_obj(4, 4, ARRAY[''text''])",
        ),
        sqlalchemy.Column(
            "rebaseable",
            sqlalchemy.Boolean(),
            nullable=True,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "mergeable",
            sqlalchemy.Boolean(),
            nullable=True,
            anonymizer_config="anon.random_int_between(0,1)",
        ),
        sqlalchemy.Column(
            "mergeable_state",
            sqlalchemy.Text(),
            nullable=True,
            anonymizer_config="anon.lorem_ipsum( characters := 10 )",
        ),
        sqlalchemy.Column(
            "changed_files",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config="anon.random_int_between(1,100000)",
        ),
        sqlalchemy.Column(
            "commits",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config="anon.random_int_between(1,100000)",
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["user_id"],
            ["github_account.id"],
            name=alembic.op.f("pull_request_user_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint("id", name=alembic.op.f("pull_request_pkey")),
    )
    alembic.op.create_table(
        "at_pull_request_assignees_github_account",
        sqlalchemy.Column(
            "pull_request_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "github_account_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["github_account_id"],
            ["github_account.id"],
            name=alembic.op.f(
                "at_pull_request_assignees_github_account_github_account_id_fkey"
            ),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["pull_request_id"],
            ["pull_request.id"],
            name=alembic.op.f(
                "at_pull_request_assignees_github_account_pull_request_id_fkey"
            ),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "pull_request_id",
            "github_account_id",
            name=alembic.op.f("at_pull_request_assignees_github_account_pkey"),
        ),
    )
    alembic.op.create_table(
        "at_pull_request_requested_reviewers_github_account",
        sqlalchemy.Column(
            "pull_request_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.Column(
            "github_account_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["github_account_id"],
            ["github_account.id"],
            name=alembic.op.f(
                "at_pull_request_requested_reviewers_github_account_github_account_id_fkey"
            ),
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["pull_request_id"],
            ["pull_request.id"],
            name=alembic.op.f(
                "at_pull_request_requested_reviewers_github_account_pull_request_id_fkey"
            ),
        ),
        sqlalchemy.PrimaryKeyConstraint(
            "pull_request_id",
            "github_account_id",
            name=alembic.op.f(
                "at_pull_request_requested_reviewers_github_account_pkey"
            ),
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # NOTE(sileht): We don't want to support downgrades as it means we will
    # drop columns. And we don't want to provide tooling that may drop data.
    # For restoring old version of the database, the only supported process is
    # to use a backup.
    pass
