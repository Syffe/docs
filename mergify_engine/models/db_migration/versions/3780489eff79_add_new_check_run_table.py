"""add new check_run table

Revision ID: 3780489eff79
Revises: b04192f4d36e
Create Date: 2023-12-18 14:01:45.853577

"""
import alembic
import sqlalchemy
from sqlalchemy.dialects import postgresql


revision = "3780489eff79"
down_revision = "b04192f4d36e"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    alembic.op.create_table(
        "check_run",
        sqlalchemy.Column(
            "id",
            sqlalchemy.BigInteger(),
            autoincrement=False,
            nullable=False,
            anonymizer_config="anon.random_int_between(1, 1000000)",
        ),
        sqlalchemy.Column(
            "head_sha",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 20 )",
        ),
        sqlalchemy.Column(
            "name",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( words := 3 )",
        ),
        sqlalchemy.Column(
            "app",
            postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
            nullable=False,
            anonymizer_config="custom_masks.jsonb_obj(3, 4, ARRAY[''text''])",
        ),
        sqlalchemy.Column(
            "external_id",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 10 )",
        ),
        sqlalchemy.Column(
            "status",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( characters := 10 )",
        ),
        sqlalchemy.Column(
            "output",
            postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
            nullable=False,
            anonymizer_config="custom_masks.jsonb_obj(3, 6, ARRAY[''text''])",
        ),
        sqlalchemy.Column(
            "conclusion",
            sqlalchemy.Text(),
            nullable=True,
            anonymizer_config="anon.lorem_ipsum( characters := 10 )",
        ),
        sqlalchemy.Column(
            "started_at",
            sqlalchemy.DateTime(timezone=True),
            server_default=sqlalchemy.text("now()"),
            nullable=False,
            anonymizer_config="anon.dnoise(started_at, ''2 days'')",
        ),
        sqlalchemy.Column(
            "completed_at",
            sqlalchemy.DateTime(timezone=True),
            server_default=sqlalchemy.text("now()"),
            nullable=True,
            anonymizer_config="anon.dnoise(completed_at, ''2 days'')",
        ),
        sqlalchemy.Column(
            "html_url",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( words := 10 )",
        ),
        sqlalchemy.Column(
            "details_url",
            sqlalchemy.Text(),
            nullable=False,
            anonymizer_config="anon.lorem_ipsum( words := 10 )",
        ),
        sqlalchemy.Column(
            "check_suite",
            postgresql.JSONB(astext_type=sqlalchemy.Text()),  # type: ignore[no-untyped-call]
            nullable=False,
            anonymizer_config="custom_masks.jsonb_obj(2, 2, ARRAY[''text''])",
        ),
        sqlalchemy.Column(
            "repo_id",
            sqlalchemy.BigInteger(),
            nullable=False,
            anonymizer_config=None,
        ),
        sqlalchemy.ForeignKeyConstraint(
            ["repo_id"],
            ["github_repository.id"],
            name=alembic.op.f("check_run_repo_id_fkey"),
        ),
        sqlalchemy.PrimaryKeyConstraint("id", name=alembic.op.f("check_run_pkey")),
    )
    alembic.op.create_index(
        "check_run_app_id_gin_idx",
        "check_run",
        [sqlalchemy.text("(app-> 'id')")],
        unique=False,
        postgresql_using="gin",
    )
    alembic.op.create_index(
        alembic.op.f("check_run_head_sha_idx"),
        "check_run",
        ["head_sha"],
        unique=False,
    )
    alembic.op.create_index(
        alembic.op.f("check_run_name_idx"),
        "check_run",
        ["name"],
        unique=False,
    )
    alembic.op.create_index(
        alembic.op.f("check_run_started_at_idx"),
        "check_run",
        ["started_at"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # NOTE(sileht): We don't want to support downgrades as it means we will
    # drop columns. And we don't want to provide tooling that may drop data.
    # For restoring old version of the database, the only supported process is
    # to use a backup.
    pass
