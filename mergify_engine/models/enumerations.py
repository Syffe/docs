from __future__ import annotations

import enum


class CheckConclusion(str, enum.Enum):
    # NOTE(lecrepont01): handles checks runs API conclusion values
    PENDING = None
    CANCELLED = "cancelled"
    SUCCESS = "success"
    FAILURE = "failure"
    SKIPPED = "skipped"
    NEUTRAL = "neutral"
    STALE = "stale"
    ACTION_REQUIRED = "action_required"
    TIMED_OUT = "timed_out"


class CheckConclusionWithStatuses(str, enum.Enum):
    # NOTE(lecrepont01): also handles the commit statuses values
    SUCCESS = "success"
    FAILURE = "failure"
    NEUTRAL = "neutral"
    CANCELLED = "cancelled"
    SKIPPED = "skipped"
    STALE = "stale"
    ACTION_REQUIRED = "action_required"
    TIMED_OUT = "timed_out"
    ERROR = "error"
    PENDING = "pending"


class ReviewType(str, enum.Enum):
    APPROVE = "APPROVE"
    REQUEST_CHANGES = "REQUEST_CHANGES"
    COMMENT = "COMMENT"


class GithubAuthenticatedActorType(str, enum.Enum):
    USER = "user"
    APPLICATION = "application"


class QueueChecksAbortCode(str, enum.Enum):
    PR_DEQUEUED = "PR_DEQUEUED"
    PR_AHEAD_DEQUEUED = "PR_AHEAD_DEQUEUED"
    PR_AHEAD_FAILED_TO_MERGE = "PR_AHEAD_FAILED_TO_MERGE"
    PR_WITH_HIGHER_PRIORITY_QUEUED = "PR_WITH_HIGHER_PRIORITY_QUEUED"
    PR_QUEUED_TWICE = "PR_QUEUED_TWICE"
    SPECULATIVE_CHECK_NUMBER_REDUCED = "SPECULATIVE_CHECK_NUMBER_REDUCED"
    CHECKS_TIMEOUT = "CHECKS_TIMEOUT"
    CHECKS_FAILED = "CHECKS_FAILED"
    QUEUE_RULE_MISSING = "QUEUE_RULE_MISSING"
    UNEXPECTED_QUEUE_CHANGE = "UNEXPECTED_QUEUE_CHANGE"
    PR_FROZEN_NO_CASCADING = "PR_FROZEN_NO_CASCADING"
    TARGET_BRANCH_MISSING = "TARGET_BRANCH_MISSING"
    TARGET_BRANCH_CHANGED = "TARGET_BRANCH_CHANGED"
    PR_UNEXPECTEDLY_FAILED_TO_MERGE = "PR_UNEXPECTEDLY_FAILED_TO_MERGE"
    BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS = "BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS"
    PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE = (
        "PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE"
    )


class QueueChecksUnqueueCode(str, enum.Enum):
    PR_DEQUEUED = "PR_DEQUEUED"
    PR_AHEAD_DEQUEUED = "PR_AHEAD_DEQUEUED"
    PR_AHEAD_FAILED_TO_MERGE = "PR_AHEAD_FAILED_TO_MERGE"
    PR_WITH_HIGHER_PRIORITY_QUEUED = "PR_WITH_HIGHER_PRIORITY_QUEUED"
    PR_QUEUED_TWICE = "PR_QUEUED_TWICE"
    SPECULATIVE_CHECK_NUMBER_REDUCED = "SPECULATIVE_CHECK_NUMBER_REDUCED"
    CHECKS_TIMEOUT = "CHECKS_TIMEOUT"
    CHECKS_FAILED = "CHECKS_FAILED"
    QUEUE_RULE_MISSING = "QUEUE_RULE_MISSING"
    UNEXPECTED_QUEUE_CHANGE = "UNEXPECTED_QUEUE_CHANGE"
    PR_FROZEN_NO_CASCADING = "PR_FROZEN_NO_CASCADING"
    TARGET_BRANCH_MISSING = "TARGET_BRANCH_MISSING"
    TARGET_BRANCH_CHANGED = "TARGET_BRANCH_CHANGED"
    PR_UNEXPECTEDLY_FAILED_TO_MERGE = "PR_UNEXPECTEDLY_FAILED_TO_MERGE"
    BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS = "BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS"
    PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE = (
        "PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE"
    )
    PR_MERGED = "PR_MERGED"


class QueueChecksAbortStatus(str, enum.Enum):
    DEFINITIVE = "DEFINITIVE"
    REEMBARKED = "REEMBARKED"
